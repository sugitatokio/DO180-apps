          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rh-sso: 7.2-v1.4.0
    template: sso72-postgresql-persistent
  message: 'A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example RH-SSO 7 application with a PostgreSQL database. For more information about using this template, see https://github.com/jboss-openshift/application-templates.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.2 + PostgreSQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: rh-sso-7.2-v1.4.0
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rh-sso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso72-postgresql-persistent
    namespace: openshift
    resourceVersion: "13708"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-postgresql-persistent
    uid: ff4eb11a-2947-4b8d-8b0d-846dc161a7c5
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso72-openshift:1.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "9.5"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-https
  message: 'A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso73-https
    namespace: openshift
    resourceVersion: "13744"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-https
    uid: 31a58bec-fcbf-4682-8ffd-a2b2db7ca870
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-mysql
  message: 'A new RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + MySQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for MySQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso73-mysql
    namespace: openshift
    resourceVersion: "13759"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-mysql
    uid: e919e906-b16e-4412-b080-5ea12e793cab
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 3306
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-mysql-persistent
  message: 'A new persistent RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + MySQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for MySQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:09Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:09Z"
    name: sso73-mysql-persistent
    namespace: openshift
    resourceVersion: "13821"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-mysql-persistent
    uid: cef4043d-a836-4770-8bdc-23bef40dfd76
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 3306
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-ocp4-x509-https
  message: A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 (Ephemeral)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:09Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:09Z"
    name: sso73-ocp4-x509-https
    namespace: openshift
    resourceVersion: "13815"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-https
    uid: 69a7b372-74bc-4f05-9089-84b7b5d738f5
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server admininistrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-ocp4-x509-mysql-persistent
  message: A new persistent RH-SSO service (using MySQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the MySQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + MySQL (Persistent)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for MySQL using persistence, and securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso73-ocp4-x509-mysql-persistent
    namespace: openshift
    resourceVersion: "13697"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-mysql-persistent
    uid: d32a845f-f0c4-4304-a242-129a10b44df7
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      ports:
      - port: 3306
        targetPort: 3306
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-mysql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
          - env:
            - name: MYSQL_USER
              value: ${DB_USERNAME}
            - name: MYSQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: MYSQL_DATABASE
              value: ${DB_DATABASE}
            - name: MYSQL_LOWER_CASE_TABLE_NAMES
              value: ${MYSQL_LOWER_CASE_TABLE_NAMES}
            - name: MYSQL_MAX_CONNECTIONS
              value: ${MYSQL_MAX_CONNECTIONS}
            - name: MYSQL_FT_MIN_WORD_LEN
              value: ${MYSQL_FT_MIN_WORD_LEN}
            - name: MYSQL_FT_MAX_WORD_LEN
              value: ${MYSQL_FT_MAX_WORD_LEN}
            - name: MYSQL_AIO
              value: ${MYSQL_AIO}
            image: mysql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 3306
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-mysql
            ports:
            - containerPort: 3306
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-mysql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-mysql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-mysql
          from:
            kind: ImageStreamTag
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-mysql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Sets how the table names are stored and compared.
    displayName: MySQL Lower Case Table Names
    name: MYSQL_LOWER_CASE_TABLE_NAMES
  - description: The maximum permitted number of simultaneous client connections.
    displayName: MySQL Maximum number of connections
    name: MYSQL_MAX_CONNECTIONS
  - description: The minimum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Minimum Word Length
    name: MYSQL_FT_MIN_WORD_LEN
  - description: The maximum length of the word to be included in a FULLTEXT index.
    displayName: MySQL FullText Maximum Word Length
    name: MYSQL_FT_MAX_WORD_LEN
  - description: Controls the innodb_use_native_aio setting value if the native AIO is broken.
    displayName: MySQL AIO
    name: MYSQL_AIO
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH_SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service.  This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    displayName: MySQL Image Stream Tag
    name: MYSQL_IMAGE_STREAM_TAG
    required: true
    value: "5.7"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-ocp4-x509-postgresql-persistent
  message: A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + PostgreSQL (Persistent)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso73-ocp4-x509-postgresql-persistent
    namespace: openshift
    resourceVersion: "13728"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-postgresql-persistent
    uid: 3a8e1f9d-c203-48e2-83fa-cab4842ca15d
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-postgresql
  message: 'A new RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + PostgreSQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for PostgreSQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso73-postgresql
    namespace: openshift
    resourceVersion: "13787"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-postgresql
    uid: cd886439-0a06-4c8c-a70a-6e4e4a30c8da
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.3.8.GA
    template: sso73-postgresql-persistent
  message: 'A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.3 image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.3 + PostgreSQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.3 server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.3.8.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso73-postgresql-persistent
    namespace: openshift
    resourceVersion: "13733"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-postgresql-persistent
    uid: 7adc25f1-22d0-4950-ac40-7a4f9b69b07f
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: redhat-sso73-openshift:1.0
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-https
  message: 'A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso74-https
    namespace: openshift
    resourceVersion: "13797"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-https
    uid: 1810df52-165f-4bfe-b3b1-62912815323f
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-ocp4-x509-https
  message: A new RH-SSO service has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK (Ephemeral)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso74-ocp4-x509-https
    namespace: openshift
    resourceVersion: "13771"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-ocp4-x509-https
    uid: fbd79a26-f936-467d-bc5f-aa16f495a41c
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server admininistrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-ocp4-x509-postgresql-persistent
  message: A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. The HTTPS keystore used for serving secure content, the JGroups keystore used for securing JGroups communications, and server truststore used for securing RH-SSO requests were automatically created via OpenShift's service serving x509 certificate secrets.
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK + PostgreSQL (Persistent)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using re-encrypt TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso74-ocp4-x509-postgresql-persistent
    namespace: openshift
    resourceVersion: "13710"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-ocp4-x509-postgresql-persistent
    uid: a86dd27e-0525-4df1-a3d4-fcacfe89b825
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      annotations:
        description: ConfigMap providing service ca bundle.
        service.beta.openshift.io/inject-cabundle: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-service-ca
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tls:
        termination: reencrypt
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: X509_CA_BUNDLE
              value: /var/run/configmaps/service-ca/service-ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/x509/https
              name: sso-x509-https-volume
              readOnly: true
            - mountPath: /etc/x509/jgroups
              name: sso-x509-jgroups-volume
              readOnly: true
            - mountPath: /var/run/configmaps/service-ca
              name: service-ca
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: sso-x509-https-volume
            secret:
              secretName: sso-x509-https-secret
          - name: sso-x509-jgroups-volume
            secret:
              secretName: sso-x509-jgroups-secret
          - configMap:
              name: ${APPLICATION_NAME}-service-ca
            name: service-ca
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: The password for the JGroups cluster.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{32}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The tag to use for the "postgresql" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-postgresql
  message: 'A new RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK + PostgreSQL (Ephemeral with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, deployment configuration for PostgreSQL using ephemeral (temporary) storage, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso74-postgresql
    namespace: openshift
    resourceVersion: "13788"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-postgresql
    uid: 0c21dc98-ecd5-4b2a-ba3c-832388a2c629
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: server
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: server
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
        component: database
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            component: database
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-data
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir:
              medium: ""
            name: ${APPLICATION_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    rhsso: 7.4.2.GA
    template: sso74-postgresql-persistent
  message: 'A new persistent RH-SSO service (using PostgreSQL) has been created in your project. The admin username/password for accessing the master realm via the RH-SSO console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: "${HTTPS_SECRET}" containing the ${HTTPS_KEYSTORE} file used for serving secure content; "${JGROUPS_ENCRYPT_SECRET}" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications; "${SSO_TRUSTSTORE_SECRET}" containing the ${SSO_TRUSTSTORE} file used for securing RH-SSO requests.'
  metadata:
    annotations:
      description: An example application based on RH-SSO 7.4 on OpenJDK image. For more information about using this template, see https://github.com/jboss-container-images/redhat-sso-7-openshift-image/tree/sso74-dev/docs.
      iconClass: icon-sso
      openshift.io/display-name: Red Hat Single Sign-On 7.4 on OpenJDK + PostgreSQL (Persistent with passthrough TLS)
      openshift.io/provider-display-name: Red Hat, Inc.
      samples.operator.openshift.io/version: 4.6.48
      tags: sso,keycloak,jboss,hidden
      template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
      template.openshift.io/long-description: This template defines resources needed to develop Red Hat Single Sign-On 7.4 on OpenJDK server based deployment, deployment configuration for PostgreSQL using persistence, and securing RH-SSO communication using passthrough TLS.
      template.openshift.io/support-url: https://access.redhat.com
      version: 7.4.2.GA
    creationTimestamp: "2021-11-28T14:02:08Z"
    labels:
      samples.operator.openshift.io/managed: "true"
    managedFields:
    - apiVersion: template.openshift.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:labels:
          .: {}
          f:rhsso: {}
          f:template: {}
        f:message: {}
        f:metadata:
          f:annotations:
            .: {}
            f:description: {}
            f:iconClass: {}
            f:openshift.io/display-name: {}
            f:openshift.io/provider-display-name: {}
            f:samples.operator.openshift.io/version: {}
            f:tags: {}
            f:template.openshift.io/documentation-url: {}
            f:template.openshift.io/long-description: {}
            f:template.openshift.io/support-url: {}
            f:version: {}
          f:labels:
            .: {}
            f:samples.operator.openshift.io/managed: {}
        f:objects: {}
        f:parameters: {}
      manager: cluster-samples-operator
      operation: Update
      time: "2021-11-28T14:02:08Z"
    name: sso74-postgresql-persistent
    namespace: openshift
    resourceVersion: "13772"
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso74-postgresql-persistent
    uid: f22a23d9-f10f-41c0-8fa2-5aacc2111b91
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's https port.
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-postgresql", "kind": "Service"}]'
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      ports:
      - port: 8443
        targetPort: 8443
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The database server's port.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      ports:
      - port: 5432
        targetPort: 5432
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APPLICATION_NAME}
  - apiVersion: v1
    id: ${APPLICATION_NAME}-https
    kind: Route
    metadata:
      annotations:
        description: Route for application's https service.
      labels:
        application: ${APPLICATION_NAME}
      name: secure-${APPLICATION_NAME}
    spec:
      host: ${HOSTNAME_HTTPS}
      tls:
        termination: passthrough
      to:
        name: secure-${APPLICATION_NAME}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
            - name: SSO_HOSTNAME
              value: ${SSO_HOSTNAME}
            - name: DB_SERVICE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_JNDI
              value: ${DB_JNDI}
            - name: DB_USERNAME
              value: ${DB_USERNAME}
            - name: DB_PASSWORD
              value: ${DB_PASSWORD}
            - name: DB_DATABASE
              value: ${DB_DATABASE}
            - name: TX_DATABASE_PREFIX_MAPPING
              value: ${APPLICATION_NAME}-postgresql=DB
            - name: DB_MIN_POOL_SIZE
              value: ${DB_MIN_POOL_SIZE}
            - name: DB_MAX_POOL_SIZE
              value: ${DB_MAX_POOL_SIZE}
            - name: DB_TX_ISOLATION
              value: ${DB_TX_ISOLATION}
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APPLICATION_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: HTTPS_KEYSTORE_DIR
              value: /etc/eap-secret-volume
            - name: HTTPS_KEYSTORE
              value: ${HTTPS_KEYSTORE}
            - name: HTTPS_KEYSTORE_TYPE
              value: ${HTTPS_KEYSTORE_TYPE}
            - name: HTTPS_NAME
              value: ${HTTPS_NAME}
            - name: HTTPS_PASSWORD
              value: ${HTTPS_PASSWORD}
            - name: JGROUPS_ENCRYPT_SECRET
              value: ${JGROUPS_ENCRYPT_SECRET}
            - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
              value: /etc/jgroups-encrypt-secret-volume
            - name: JGROUPS_ENCRYPT_KEYSTORE
              value: ${JGROUPS_ENCRYPT_KEYSTORE}
            - name: JGROUPS_ENCRYPT_NAME
              value: ${JGROUPS_ENCRYPT_NAME}
            - name: JGROUPS_ENCRYPT_PASSWORD
              value: ${JGROUPS_ENCRYPT_PASSWORD}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: SSO_ADMIN_USERNAME
              value: ${SSO_ADMIN_USERNAME}
            - name: SSO_ADMIN_PASSWORD
              value: ${SSO_ADMIN_PASSWORD}
            - name: SSO_REALM
              value: ${SSO_REALM}
            - name: SSO_SERVICE_USERNAME
              value: ${SSO_SERVICE_USERNAME}
            - name: SSO_SERVICE_PASSWORD
              value: ${SSO_SERVICE_PASSWORD}
            - name: SSO_TRUSTSTORE
              value: ${SSO_TRUSTSTORE}
            - name: SSO_TRUSTSTORE_DIR
              value: /etc/sso-secret-volume
            - name: SSO_TRUSTSTORE_PASSWORD
              value: ${SSO_TRUSTSTORE_PASSWORD}
            image: ${APPLICATION_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            volumeMounts:
            - mountPath: /etc/eap-secret-volume
              name: eap-keystore-volume
              readOnly: true
            - mountPath: /etc/jgroups-encrypt-secret-volume
              name: eap-jgroups-keystore-volume
              readOnly: true
            - mountPath: /etc/sso-secret-volume
              name: sso-truststore-volume
              readOnly: true
          terminationGracePeriodSeconds: 75
          volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
          - name: sso-truststore-volume
            secret:
              secretName: ${SSO_TRUSTSTORE_SECRET}
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: sso74-openshift-rhel8:7.4
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}-postgresql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}-postgresql
          name: ${APPLICATION_NAME}-postgresql
        spec:
          containers:
          - env:
            - name: POSTGRESQL_USER
              value: ${DB_USERNAME}
            - name: POSTGRESQL_PASSWORD
              value: ${DB_PASSWORD}
            - name: POSTGRESQL_DATABASE
              value: ${DB_DATABASE}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
              value: ${POSTGRESQL_MAX_CONNECTIONS}
            - name: POSTGRESQL_SHARED_BUFFERS
              value: ${POSTGRESQL_SHARED_BUFFERS}
            image: postgresql
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              tcpSocket:
                port: 5432
              timeoutSeconds: 10
            name: ${APPLICATION_NAME}-postgresql
            ports:
            - containerPort: 5432
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              failureThreshold: 3
              initialDelaySeconds: 90
              'successThreshold:': 1
              timeoutSeconds: 10
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${APPLICATION_NAME}-postgresql-pvol
          terminationGracePeriodSeconds: 60
          volumes:
          - name: ${APPLICATION_NAME}-postgresql-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-postgresql-claim
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APPLICATION_NAME}-postgresql
          from:
            kind: ImageStreamTag
            name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-postgresql-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APPLICATION_NAME
    required: true
    value: sso
  - description: 'Custom hostname for http service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname
    name: HOSTNAME_HTTP
  - description: 'Custom hostname for https service route. Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
    displayName: Custom https Route Hostname
    name: HOSTNAME_HTTPS
  - description: Custom hostname for the RH-SSO server.
    displayName: Custom RH-SSO Server Hostname
    name: SSO_HOSTNAME
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql
    displayName: Database JNDI Name
    name: DB_JNDI
    value: java:jboss/datasources/KeycloakDS
  - description: Database name
    displayName: Database Name
    name: DB_DATABASE
    required: true
    value: root
  - description: The name of the secret containing the keystore file
    displayName: Server Keystore Secret Name
    name: HTTPS_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: Server Keystore Filename
    name: HTTPS_KEYSTORE
    value: keystore.jks
  - description: The type of the keystore file (JKS or JCEKS)
    displayName: Server Keystore Type
    name: HTTPS_KEYSTORE_TYPE
  - description: The name associated with the server certificate (e.g. jboss)
    displayName: Server Certificate Name
    name: HTTPS_NAME
  - description: The password for the keystore and certificate (e.g. mykeystorepass)
    displayName: Server Keystore Password
    name: HTTPS_PASSWORD
  - description: Sets xa-pool/min-pool-size for the configured datasource.
    displayName: Datasource Minimum Pool Size
    name: DB_MIN_POOL_SIZE
  - description: Sets xa-pool/max-pool-size for the configured datasource.
    displayName: Datasource Maximum Pool Size
    name: DB_MAX_POOL_SIZE
  - description: Sets transaction-isolation for the configured datasource.
    displayName: Datasource Transaction Isolation
    name: DB_TX_ISOLATION
  - description: The maximum number of client connections allowed. This also sets the maximum number of prepared transactions.
    displayName: PostgreSQL Maximum number of connections
    name: POSTGRESQL_MAX_CONNECTIONS
  - description: Configures how much memory is dedicated to PostgreSQL for caching data.
    displayName: PostgreSQL Shared Buffers
    name: POSTGRESQL_SHARED_BUFFERS
  - description: Database user name
    displayName: Database Username
    from: user[a-zA-Z0-9]{3}
    generate: expression
    name: DB_USERNAME
    required: true
  - description: Database user password
    displayName: Database Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: DB_PASSWORD
    required: true
  - description: Size of persistent storage for database volume.
    displayName: Database Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description: The name of the secret containing the keystore file
    displayName: JGroups Secret Name
    name: JGROUPS_ENCRYPT_SECRET
    value: sso-app-secret
  - description: The name of the keystore file within the secret
    displayName: JGroups Keystore Filename
    name: JGROUPS_ENCRYPT_KEYSTORE
    value: jgroups.jceks
  - description: The name associated with the server certificate (e.g. secret-key)
    displayName: JGroups Certificate Name
    name: JGROUPS_ENCRYPT_NAME
  - description: The password for the keystore and certificate (e.g. password)
    displayName: JGroups Keystore Password
    name: JGROUPS_ENCRYPT_PASSWORD
  - description: JGroups cluster password
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: RH-SSO Server administrator username
    displayName: RH-SSO Administrator Username
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_USERNAME
    required: true
  - description: RH-SSO Server administrator password
    displayName: RH-SSO Administrator Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: SSO_ADMIN_PASSWORD
    required: true
  - description: Realm to be created in the RH-SSO server (e.g. demorealm).
    displayName: RH-SSO Realm
    name: SSO_REALM
  - description: The username used to access the RH-SSO service. This is used by clients to create the appliction client(s) within the specified RH-SSO realm.
    displayName: RH-SSO Service Username
    name: SSO_SERVICE_USERNAME
  - description: The password for the RH-SSO service user.
    displayName: RH-SSO Service Password
    name: SSO_SERVICE_PASSWORD
  - description: The name of the truststore file within the secret (e.g. truststore.jks)
    displayName: RH-SSO Trust Store
    name: SSO_TRUSTSTORE
  - description: The password for the truststore and certificate (e.g. mykeystorepass)
    displayName: RH-SSO Trust Store Password
    name: SSO_TRUSTSTORE_PASSWORD
  - description: The name of the secret containing the truststore file (e.g. truststore-secret). Used for volume secretName
    displayName: RH-SSO Trust Store Secret
    name: SSO_TRUSTSTORE_SECRET
    value: sso-app-secret
  - description: The tag to use for the "postgresql" image stream. Typically, this aligns with the major.minor version of PostgreSQL.
    displayName: PostgreSQL Image Stream Tag
    name: POSTGRESQL_IMAGE_STREAM_TAG
    required: true
    value: "10"
  - description: Container memory limit.
    displayName: Container Memory Limit
    name: MEMORY_LIMIT
    value: 1Gi
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
[student@workstation ~]$ ^C
[student@workstation ~]$ oc get template -n openshift -o yaml | grep mysql
    app: cakephp-mysql-example
    template: cakephp-mysql-example
    name: cakephp-mysql-example
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/cakephp-mysql-example
              containerName: cakephp-mysql-example
            name: cakephp-mysql-example
          - cakephp-mysql-example
      - name: mysql
            name: mysql
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - mysql
            name: mysql:8.0-el8
    value: cakephp-mysql-example
    value: mysql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    value: mysql
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once PHP client supports it.'
    value: mysql_native_password
    app: cakephp-mysql-persistent
    template: cakephp-mysql-persistent
    name: cakephp-mysql-persistent
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/cakephp-mysql-persistent
              containerName: cakephp-mysql-persistent
            name: cakephp-mysql-persistent
          - cakephp-mysql-persistent
      - name: mysql
            name: mysql
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - mysql
            name: mysql:8.0-el8
    value: cakephp-mysql-persistent
    value: mysql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    value: mysql
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once PHP client supports it.'
    value: mysql_native_password
    app: dancer-mysql-example
    template: dancer-mysql-example
    name: dancer-mysql-example
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/dancer-mysql-example
            name: dancer-mysql-example
          - dancer-mysql-example
      - name: mysql
            name: mysql
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - mysql
            name: mysql:8.0-el8
    value: dancer-mysql-example
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once clients support it.'
    value: mysql_native_password
    app: dancer-mysql-persistent
    template: dancer-mysql-persistent
    name: dancer-mysql-persistent
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/dancer-mysql-persistent
            name: dancer-mysql-persistent
          - dancer-mysql-persistent
      - name: mysql
            name: mysql
                - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - mysql
            name: mysql:8.0-el8
    value: dancer-mysql-persistent
  - description: 'The custom MySQL default authentication plugin (default: mysql_native_password), might be changed to caching_sha2_password once clients support it.'
    value: mysql_native_password
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    template: jws31-tomcat7-mysql-persistent-s2i
    name: jws31-tomcat7-mysql-persistent-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-mysql-persistent-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws31-tomcat7-mysql-s2i
    name: jws31-tomcat7-mysql-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat7-mysql-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws31-tomcat8-mysql-persistent-s2i
    name: jws31-tomcat8-mysql-persistent-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-mysql-persistent-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws31-tomcat8-mysql-s2i
    name: jws31-tomcat8-mysql-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws31-tomcat8-mysql-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws53-openjdk11-tomcat9-mysql-persistent-s2i
    name: jws53-openjdk11-tomcat9-mysql-persistent-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-mysql-persistent-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws53-openjdk11-tomcat9-mysql-s2i
    name: jws53-openjdk11-tomcat9-mysql-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk11-tomcat9-mysql-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws53-openjdk8-tomcat9-mysql-persistent-s2i
    name: jws53-openjdk8-tomcat9-mysql-persistent-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-mysql-persistent-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: jws53-openjdk8-tomcat9-mysql-s2i
    name: jws53-openjdk8-tomcat9-mysql-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/jws53-openjdk8-tomcat9-mysql-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: Database JNDI name used by application to resolve the datasource, e.g. jboss/datasources/mysqlDS
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/
    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.
        MariaDB database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.
      openshift.io/documentation-url: https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            - mountPath: /var/lib/mysql/data
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/
    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.
        MariaDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md.
      openshift.io/documentation-url: https://github.com/sclorg/mariadb-container/blob/master/10.3/root/usr/share/container-scripts/mysql/README.md
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            - mountPath: /var/lib/mysql/data
    template: mysql-ephemeral-template
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/
    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
        MySQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
      iconClass: icon-mysql-database
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/mysql.html
      tags: database,mysql
    name: mysql-ephemeral
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/mysql-ephemeral
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
      - name: mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            name: mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            - mountPath: /var/lib/mysql/data
          - mysql
            name: mysql:${MYSQL_VERSION}
    value: mysql
    template: mysql-persistent-template
     Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/
    For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
        MySQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
      iconClass: icon-mysql-database
      openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/mysql.html
      tags: database,mysql
    name: mysql-persistent
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/mysql-persistent
        template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
      - name: mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            name: mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping
            - mountPath: /var/lib/mysql/data
          - mysql
            name: mysql:${MYSQL_VERSION}
    value: mysql
    template: processserver64-amq-mysql-persistent-s2i
    name: processserver64-amq-mysql-persistent-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-amq-mysql-persistent-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB,${APPLICATION_NAME}-mysql=QUARTZ
              value: ${APPLICATION_NAME}-mysql=DB
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: processserver64-amq-mysql-s2i
    name: processserver64-amq-mysql-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-amq-mysql-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-tcp", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
  - description: Sets the datasource service port. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the URL or XA_CONNECTION_URL is set
  - description: Sets the datasource service port. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the URL or XA_CONNECTION_URL is set
  - description: The predefined driver name, available values are mysql, postgresql or the preferred name for the external driver. For external driver the value passed here should be the same than EXTERNALDB_DRIVER_NAME.
    template: processserver64-mysql-persistent-s2i
    name: processserver64-mysql-persistent-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-mysql-persistent-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB,${APPLICATION_NAME}-mysql=QUARTZ
              value: ${APPLICATION_NAME}-mysql=DB
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
    template: processserver64-mysql-s2i
    name: processserver64-mysql-s2i
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/processserver64-mysql-s2i
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql
            - replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-mysql; replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            name: ${APPLICATION_NAME}-mysql-init
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
              value: mysql_native_password
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Sets the datasource service host. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the KIE_SERVER_EXTERNALDB_URL parameter is set.
  - description: Sets the datasource service port. Use this if you want to use the predefined mysql or postgresql datasource properties. Leave blank if the KIE_SERVER_EXTERNALDB_URL parameter is set.
  - description: The predefined driver name, available values are mysql, postgresql or the preferred name for the external driver.
    template: rhpam78-kieserver-mysql
      tags: rhpam,processserver,jboss,kieserver,mysql
    name: rhpam78-kieserver-mysql
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/rhpam78-kieserver-mysql
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker
              value: org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter
              value: ${APPLICATION_NAME}-mysql
            - replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); until "[" $replicas -gt 0 "]"; do echo waiting for ${APPLICATION_NAME}-mysql; replicas=$(oc get dc ${APPLICATION_NAME}-mysql -o=jsonpath='{.status.availableReplicas}'); sleep 2; done;
            name: ${APPLICATION_NAME}-mysql-init
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
            service: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
              value: mysql_native_password
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
        service: ${APPLICATION_NAME}-mysql
      name: ${APPLICATION_NAME}-mysql-claim
    template: sso72-mysql
    name: sso72-mysql
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-mysql
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    template: sso72-mysql-persistent
    name: sso72-mysql-persistent
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso72-mysql-persistent
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    template: sso73-mysql
    name: sso73-mysql
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-mysql
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    template: sso73-mysql-persistent
    name: sso73-mysql-persistent
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-mysql-persistent
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
  - description: The tag to use for the "mysql" image stream. Typically, this aligns with the major.minor version of MySQL.
    template: sso73-ocp4-x509-mysql-persistent
    name: sso73-ocp4-x509-mysql-persistent
    selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/sso73-ocp4-x509-mysql-persistent
        service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-mysql", "kind": "Service"}]'
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
              value: ${APPLICATION_NAME}-mysql=DB
              value: ${APPLICATION_NAME}-mysql=DB
      name: ${APPLICATION_NAME}-mysql
        deploymentConfig: ${APPLICATION_NAME}-mysql
            deploymentConfig: ${APPLICATION_NAME}-mysql
          name: ${APPLICATION_NAME}-mysql
            image: mysql
            name: ${APPLICATION_NAME}-mysql
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
            - mountPath: /var/lib/mysql/data
              name: ${APPLICATION_NAME}-mysql-pvol
          - name: ${APPLICATION_NAME}-mysql-pvol
              claimName: ${APPLICATION_NAME}-mysql-claim
          - ${APPLICATION_NAME}-mysql
            name: mysql:${MYSQL_IMAGE_STREAM_TAG}
      name: ${APPLICATION_NAME}-mysql-claim
  - description: Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/mysql
  - description: The tag to use for the "mysql" image stream.  Typically, this aligns with the major.minor version of MySQL.
[student@workstation ~]$ ^C
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get template -n openshift -o yaml | grep mysql-openshift
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc new-app \
> --template=mysql-persistent \
> -p MYSQL_USER=user1 -p MYSQL_PASSWORD=mypa55 -p MYSQL_DATABASE=testdb \
> -p MYSQL_ROOT_PASSWORD=r00tpa55 -p VOLUME_CAPACITY=10Gi
--> Deploying template "openshift/mysql-persistent" to project lizwbb-mysql-openshift

     MySQL
     ---------
     MySQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.
     
     NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.

     The following service(s) have been created in your project: mysql.
     
            Username: user1
            Password: mypa55
       Database Name: testdb
      Connection URL: mysql://mysql:3306/
     
     For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/8.0/root/usr/share/container-scripts/mysql/README.md.

     * With parameters:
        * Memory Limit=512Mi
        * Namespace=openshift
        * Database Service Name=mysql
        * MySQL Connection Username=user1
        * MySQL Connection Password=mypa55
        * MySQL root user Password=r00tpa55
        * MySQL Database Name=testdb
        * Volume Capacity=10Gi
        * Version of MySQL Image=8.0-el8

--> Creating resources ...
    secret "mysql" created
    service "mysql" created
    persistentvolumeclaim "mysql" created
    deploymentconfig.apps.openshift.io "mysql" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose service/mysql' 
    Run 'oc status' to view your app.
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc status
In project lizwbb-mysql-openshift on server https://api.ap46.prod.nextcle.com:6443

svc/mysql - 172.30.204.211:3306
  dc/mysql deploys openshift/mysql:8.0-el8 
    deployment #1 running for 9 seconds - 0/1 pods

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation ~]$ 
[student@workstation ~]$ oc status
In project lizwbb-mysql-openshift on server https://api.ap46.prod.nextcle.com:6443

svc/mysql - 172.30.204.211:3306
  dc/mysql deploys openshift/mysql:8.0-el8 
    deployment #1 running for 27 seconds - 0/1 pods

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc status
In project lizwbb-mysql-openshift on server https://api.ap46.prod.nextcle.com:6443

svc/mysql - 172.30.204.211:3306
  dc/mysql deploys openshift/mysql:8.0-el8 
    deployment #1 deployed 4 minutes ago - 1 pod

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get pods
NAME             READY   STATUS      RESTARTS   AGE
mysql-1-deploy   0/1     Completed   0          4m39s
mysql-1-tppqn    1/1     Running     0          4m36s
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc describe pod mysql-1-tppqn
Name:         mysql-1-tppqn
Namespace:    lizwbb-mysql-openshift
Priority:     0
Node:         ap46-sqlh5-worker-0-gsl8g/10.0.0.253
Start Time:   Thu, 02 Dec 2021 04:21:35 -0500
Labels:       deployment=mysql-1
              deploymentconfig=mysql
              name=mysql
Annotations:  k8s.v1.cni.cncf.io/network-status:
                [{
                    "name": "",
                    "interface": "eth0",
                    "ips": [
                        "10.129.9.10"
                    ],
                    "default": true,
                    "dns": {}
                }]
              k8s.v1.cni.cncf.io/networks-status:
                [{
                    "name": "",
                    "interface": "eth0",
                    "ips": [
                        "10.129.9.10"
                    ],
                    "default": true,
                    "dns": {}
                }]
              kubernetes.io/limit-ranger: LimitRanger plugin set: cpu request for container mysql; cpu limit for container mysql
              openshift.io/deployment-config.latest-version: 1
              openshift.io/deployment-config.name: mysql
              openshift.io/deployment.name: mysql-1
              openshift.io/generated-by: OpenShiftNewApp
              openshift.io/scc: restricted
Status:       Running
IP:           10.129.9.10
IPs:
  IP:           10.129.9.10
Controlled By:  ReplicationController/mysql-1
Containers:
  mysql:
    Container ID:   cri-o://f5d034bebed6d2ee61d395a2ba6a0de8b2c16b593bd6a63fb95844606aa85321
    Image:          image-registry.openshift-image-registry.svc:5000/openshift/mysql@sha256:54a45c2e00a0d83605d7c2f262ca515d8f5fa1e47ea289e49cfee87c89e3d7ab
    Image ID:       image-registry.openshift-image-registry.svc:5000/openshift/mysql@sha256:54a45c2e00a0d83605d7c2f262ca515d8f5fa1e47ea289e49cfee87c89e3d7ab
    Port:           3306/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 02 Dec 2021 04:21:47 -0500
    Ready:          True
    Restart Count:  0
    Limits:
      cpu:     1500m
      memory:  512Mi
    Requests:
      cpu:      5m
      memory:   512Mi
    Liveness:   exec [/bin/sh -i -c MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping] delay=30s timeout=1s period=10s #success=1 #failure=3
    Readiness:  exec [/bin/sh -i -c MYSQL_PWD="$MYSQL_PASSWORD" mysqladmin -u $MYSQL_USER ping] delay=5s timeout=1s period=10s #success=1 #failure=3
    Environment:
      MYSQL_USER:           <set to the key 'database-user' in secret 'mysql'>           Optional: false
      MYSQL_PASSWORD:       <set to the key 'database-password' in secret 'mysql'>       Optional: false
      MYSQL_ROOT_PASSWORD:  <set to the key 'database-root-password' in secret 'mysql'>  Optional: false
      MYSQL_DATABASE:       <set to the key 'database-name' in secret 'mysql'>           Optional: false
    Mounts:
      /var/lib/mysql/data from mysql-data (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-hzp2j (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  mysql-data:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  mysql
    ReadOnly:   false
  default-token-hzp2j:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-hzp2j
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason                  Age    From                     Message
  ----     ------                  ----   ----                     -------
  Normal   Scheduled               6m39s  default-scheduler        Successfully assigned lizwbb-mysql-openshift/mysql-1-tppqn to ap46-sqlh5-worker-0-gsl8g
  Normal   SuccessfulAttachVolume  6m36s  attachdetach-controller  AttachVolume.Attach succeeded for volume "pvc-3f8a0083-3af9-41d3-afc5-2f2f5d99bc31"
  Normal   AddedInterface          6m28s  multus                   Add eth0 [10.129.9.10/23]
  Normal   Pulled                  6m27s  kubelet                  Container image "image-registry.openshift-image-registry.svc:5000/openshift/mysql@sha256:54a45c2e00a0d83605d7c2f262ca515d8f5fa1e47ea289e49cfee87c89e3d7ab" already present on machine
  Normal   Created                 6m27s  kubelet                  Created container mysql
  Normal   Started                 6m27s  kubelet                  Started container mysql
  Warning  Unhealthy               6m17s  kubelet                  Readiness probe failed: sh: cannot set terminal process group (-1): Inappropriate ioctl for device
sh: no job control in this shell
mysqladmin: connect to server at 'localhost' failed
error: 'Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)'
Check that mysqld is running and that the socket: '/var/lib/mysql/mysql.sock' exists!
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get svc
NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
mysql   ClusterIP   172.30.204.211   <none>        3306/TCP   7m18s
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ o^C
[student@workstation ~]$ oc describe service mysql
Name:              mysql
Namespace:         lizwbb-mysql-openshift
Labels:            app=mysql-persistent
                   app.kubernetes.io/component=mysql-persistent
                   app.kubernetes.io/instance=mysql-persistent
                   template=mysql-persistent-template
Annotations:       openshift.io/generated-by: OpenShiftNewApp
                   template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
Selector:          name=mysql
Type:              ClusterIP
IP:                172.30.204.211
Port:              mysql  3306/TCP
TargetPort:        3306/TCP
Endpoints:         10.129.9.10:3306
Session Affinity:  None
Events:            <none>
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get pvc
NAME    STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
mysql   Bound    pvc-3f8a0083-3af9-41d3-afc5-2f2f5d99bc31   10Gi       RWO            standard       8m46s
[student@workstation ~]$ 
[student@workstation ~]$ ^C
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  oc describe pvc/mysql
Name:          mysql
Namespace:     lizwbb-mysql-openshift
StorageClass:  standard
Status:        Bound
Volume:        pvc-3f8a0083-3af9-41d3-afc5-2f2f5d99bc31
Labels:        app=mysql-persistent
               app.kubernetes.io/component=mysql-persistent
               app.kubernetes.io/instance=mysql-persistent
               template=mysql-persistent-template
Annotations:   openshift.io/generated-by: OpenShiftNewApp
               pv.kubernetes.io/bind-completed: yes
               pv.kubernetes.io/bound-by-controller: yes
               volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/cinder
               volume.kubernetes.io/selected-node: ap46-sqlh5-worker-0-gsl8g
Finalizers:    [kubernetes.io/pvc-protection]
Capacity:      10Gi
Access Modes:  RWO
VolumeMode:    Filesystem
Mounted By:    mysql-1-tppqn
Events:
  Type    Reason                 Age   From                         Message
  ----    ------                 ----  ----                         -------
  Normal  WaitForFirstConsumer   19m   persistentvolume-controller  waiting for first consumer to be created before binding
  Normal  ProvisioningSucceeded  19m   persistentvolume-controller  Successfully provisioned volume pvc-3f8a0083-3af9-41d3-afc5-2f2f5d99bc31 using kubernetes.io/cinder
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get pv
Error from server (Forbidden): persistentvolumes is forbidden: User "lizwbb" cannot list resource "persistentvolumes" in API group "" at the cluster scope
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ podman --help
manage pods and images

Usage:
  podman [flags]
  podman [command]

Available Commands:
  attach      Attach to a running container
  build       Build an image using instructions from Containerfiles
  commit      Create new image based on the changed container
  container   Manage Containers
  cp          Copy files/folders between a container and the local filesystem
  create      Create but do not start a container
  diff        Inspect changes on container's file systems
  events      Show podman events
  exec        Run a process in a running container
  export      Export container's filesystem contents as a tar archive
  generate    Generated structured data
  healthcheck Manage Healthcheck
  help        Help about any command
  history     Show history of a specified image
  image       Manage images
  images      List images in local storage
  import      Import a tarball to create a filesystem image
  info        Display podman system information
  init        Initialize one or more containers
  inspect     Display the configuration of a container or image
  kill        Kill one or more running containers with a specific signal
  load        Load an image from container archive
  login       Login to a container registry
  logout      Logout of a container registry
  logs        Fetch the logs of a container
  mount       Mount a working container's root filesystem
  network     Manage Networks
  pause       Pause all the processes in one or more containers
  play        Play a pod
  pod         Manage pods
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image from a registry
  push        Push an image to a specified destination
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Removes one or more images from local storage
  run         Run a command in a new container
  save        Save image to an archive
  search      Search registry for image
  start       Start one or more containers
  stats       Display a live stream of container resource usage statistics
  stop        Stop one or more containers
  system      Manage podman
  tag         Add an additional name to a local image
  top         Display the running processes of a container
  umount      Unmounts working container's root filesystem
  unpause     Unpause the processes in one or more containers
  unshare     Run a command in a modified user namespace
  varlink     Run varlink interface
  version     Display the Podman Version Information
  volume      Manage volumes
  wait        Block on one or more containers

Flags:
      --cgroup-manager string     Cgroup manager is not supported in rootless mode
      --cni-config-dir string     Path of the configuration directory for CNI networks
      --config string             Path of a libpod config file detailing container server configuration options
      --conmon string             Path of the conmon binary
      --cpu-profile string        Path for the cpu profiling results
      --events-backend string     Events backend to use
      --help                      Help for podman
      --hooks-dir strings         Set the OCI hooks directory path (may be set multiple times)
      --log-level string          Log messages above specified level: debug, info, warn, error, fatal or panic (default "error")
      --namespace string          Set the libpod namespace, used to create separate views of the containers and pods on the system
      --network-cmd-path string   Path to the command for configuring the network
      --root string               Path to the root directory in which data, including images, is stored
      --runroot string            Path to the 'run directory' where all state information is stored
      --runtime string            Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc
      --storage-driver string     Select which storage driver is used to manage storage of images and containers (default is overlay)
      --storage-opt stringArray   Used to pass an option to the storage driver
      --syslog                    Output logging information to syslog as well as the console
      --tmpdir string             Path to the tmp directory
      --trace                     Enable opentracing output
  -v, --version                   Version of podman

Use "podman [command] --help" for more information about a command.
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ podman --h
Error: unknown flag: --h
[student@workstation ~]$ podman -h
manage pods and images

Usage:
  podman [flags]
  podman [command]

Available Commands:
  attach      Attach to a running container
  build       Build an image using instructions from Containerfiles
  commit      Create new image based on the changed container
  container   Manage Containers
  cp          Copy files/folders between a container and the local filesystem
  create      Create but do not start a container
  diff        Inspect changes on container's file systems
  events      Show podman events
  exec        Run a process in a running container
  export      Export container's filesystem contents as a tar archive
  generate    Generated structured data
  healthcheck Manage Healthcheck
  help        Help about any command
  history     Show history of a specified image
  image       Manage images
  images      List images in local storage
  import      Import a tarball to create a filesystem image
  info        Display podman system information
  init        Initialize one or more containers
  inspect     Display the configuration of a container or image
  kill        Kill one or more running containers with a specific signal
  load        Load an image from container archive
  login       Login to a container registry
  logout      Logout of a container registry
  logs        Fetch the logs of a container
  mount       Mount a working container's root filesystem
  network     Manage Networks
  pause       Pause all the processes in one or more containers
  play        Play a pod
  pod         Manage pods
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image from a registry
  push        Push an image to a specified destination
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Removes one or more images from local storage
  run         Run a command in a new container
  save        Save image to an archive
  search      Search registry for image
  start       Start one or more containers
  stats       Display a live stream of container resource usage statistics
  stop        Stop one or more containers
  system      Manage podman
  tag         Add an additional name to a local image
  top         Display the running processes of a container
  umount      Unmounts working container's root filesystem
  unpause     Unpause the processes in one or more containers
  unshare     Run a command in a modified user namespace
  varlink     Run varlink interface
  version     Display the Podman Version Information
  volume      Manage volumes
  wait        Block on one or more containers

Flags:
      --cgroup-manager string     Cgroup manager is not supported in rootless mode
      --cni-config-dir string     Path of the configuration directory for CNI networks
      --config string             Path of a libpod config file detailing container server configuration options
      --conmon string             Path of the conmon binary
      --cpu-profile string        Path for the cpu profiling results
      --events-backend string     Events backend to use
      --help                      Help for podman
      --hooks-dir strings         Set the OCI hooks directory path (may be set multiple times)
      --log-level string          Log messages above specified level: debug, info, warn, error, fatal or panic (default "error")
      --namespace string          Set the libpod namespace, used to create separate views of the containers and pods on the system
      --network-cmd-path string   Path to the command for configuring the network
      --root string               Path to the root directory in which data, including images, is stored
      --runroot string            Path to the 'run directory' where all state information is stored
      --runtime string            Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc
      --storage-driver string     Select which storage driver is used to manage storage of images and containers (default is overlay)
      --storage-opt stringArray   Used to pass an option to the storage driver
      --syslog                    Output logging information to syslog as well as the console
      --tmpdir string             Path to the tmp directory
      --trace                     Enable opentracing output
  -v, --version                   Version of podman

Use "podman [command] --help" for more information about a command.
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ podman images --help
List images in local storage

Description:
  Lists images previously pulled to the system or created on the system.

Usage:
  podman images [flags] [IMAGE]

Examples:
  podman images --format json
  podman images --sort repository --format "table {{.ID}} {{.Repository}} {{.Tag}}"
  podman images --filter dangling=true

Flags:
  -a, --all              Show all images (default hides intermediate images)
      --digests          Show digests
  -f, --filter strings   Filter output based on conditions provided (default [])
      --format string    Change the output format to JSON or a Go template
      --no-trunc         Do not truncate output
  -n, --noheading        Do not print column headings
  -q, --quiet            Display only image IDs
      --sort string      Sort by created, id, repository, size, or tag (default "created")

[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ podman images -h
List images in local storage

Description:
  Lists images previously pulled to the system or created on the system.

Usage:
  podman images [flags] [IMAGE]

Examples:
  podman images --format json
  podman images --sort repository --format "table {{.ID}} {{.Repository}} {{.Tag}}"
  podman images --filter dangling=true

Flags:
  -a, --all              Show all images (default hides intermediate images)
      --digests          Show digests
  -f, --filter strings   Filter output based on conditions provided (default [])
      --format string    Change the output format to JSON or a Go template
      --no-trunc         Do not truncate output
  -n, --noheading        Do not print column headings
  -q, --quiet            Display only image IDs
      --sort string      Sort by created, id, repository, size, or tag (default "created")

[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc -h
OpenShift Client

This client helps you develop, build, deploy, and run your applications on any
OpenShift or Kubernetes cluster. It also includes the administrative
commands for managing a cluster under the 'adm' subcommand.

Usage:
  oc [flags]

Basic Commands:
  login           Log in to a server
  new-project     Request a new project
  new-app         Create a new application
  status          Show an overview of the current project
  project         Switch to another project
  projects        Display existing projects
  explain         Documentation of resources

Build and Deploy Commands:
  rollout         Manage a Kubernetes deployment or OpenShift deployment config
  rollback        Revert part of an application back to a previous deployment
  new-build       Create a new build configuration
  start-build     Start a new build
  cancel-build    Cancel running, pending, or new builds
  import-image    Imports images from a container image registry
  tag             Tag existing images into image streams

Application Management Commands:
  create          Create a resource from a file or from stdin.
  apply           Apply a configuration to a resource by filename or stdin
  get             Display one or many resources
  describe        Show details of a specific resource or group of resources
  edit            Edit a resource on the server
  set             Commands that help set specific features on objects
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  expose          Expose a replicated application as a service or route
  delete          Delete resources by filenames, stdin, resources and names, or by resources and label selector
  scale           Set a new size for a Deployment, ReplicaSet or Replication Controller
  autoscale       Autoscale a deployment config, deployment, replica set, stateful set, or replication controller
  secrets         Manage secrets
  serviceaccounts Manage service accounts in your project

Troubleshooting and Debugging Commands:
  logs            Print the logs for a container in a pod
  rsh             Start a shell session in a container.
  rsync           Copy files between local filesystem and a pod
  port-forward    Forward one or more local ports to a pod
  debug           Launch a new instance of a pod for debugging
  exec            Execute a command in a container
  proxy           Run a proxy to the Kubernetes API server
  attach          Attach to a running container
  run             Run a particular image on the cluster
  cp              Copy files and directories to and from containers.
  wait            Experimental: Wait for a specific condition on one or many resources.

Advanced Commands:
  adm             Tools for managing a cluster
  replace         Replace a resource by filename or stdin
  patch           Update field(s) of a resource using strategic merge patch
  process         Process a template into list of resources
  extract         Extract secrets or config maps to disk
  observe         Observe changes to resources and react to them (experimental)
  policy          Manage authorization policy
  auth            Inspect authorization
  convert         Convert config files between different API versions
  image           Useful commands for managing images
  registry        Commands for working with the registry
  idle            Idle scalable resources
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  api-resources   Print the supported API resources on the server
  cluster-info    Display cluster info
  diff            Diff live version against would-be applied version
  kustomize       Build a kustomization target from a directory or a remote url.

Settings Commands:
  logout          End the current server session
  config          Modify kubeconfig files
  whoami          Return information about the current session
  completion      Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  ex              Experimental commands under active development
  help            Help about any command
  plugin          Provides utilities for interacting with plugins.
  version         Print the client and server version information

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc --help
OpenShift Client

This client helps you develop, build, deploy, and run your applications on any
OpenShift or Kubernetes cluster. It also includes the administrative
commands for managing a cluster under the 'adm' subcommand.

Usage:
  oc [flags]

Basic Commands:
  login           Log in to a server
  new-project     Request a new project
  new-app         Create a new application
  status          Show an overview of the current project
  project         Switch to another project
  projects        Display existing projects
  explain         Documentation of resources

Build and Deploy Commands:
  rollout         Manage a Kubernetes deployment or OpenShift deployment config
  rollback        Revert part of an application back to a previous deployment
  new-build       Create a new build configuration
  start-build     Start a new build
  cancel-build    Cancel running, pending, or new builds
  import-image    Imports images from a container image registry
  tag             Tag existing images into image streams

Application Management Commands:
  create          Create a resource from a file or from stdin.
  apply           Apply a configuration to a resource by filename or stdin
  get             Display one or many resources
  describe        Show details of a specific resource or group of resources
  edit            Edit a resource on the server
  set             Commands that help set specific features on objects
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  expose          Expose a replicated application as a service or route
  delete          Delete resources by filenames, stdin, resources and names, or by resources and label selector
  scale           Set a new size for a Deployment, ReplicaSet or Replication Controller
  autoscale       Autoscale a deployment config, deployment, replica set, stateful set, or replication controller
  secrets         Manage secrets
  serviceaccounts Manage service accounts in your project

Troubleshooting and Debugging Commands:
  logs            Print the logs for a container in a pod
  rsh             Start a shell session in a container.
  rsync           Copy files between local filesystem and a pod
  port-forward    Forward one or more local ports to a pod
  debug           Launch a new instance of a pod for debugging
  exec            Execute a command in a container
  proxy           Run a proxy to the Kubernetes API server
  attach          Attach to a running container
  run             Run a particular image on the cluster
  cp              Copy files and directories to and from containers.
  wait            Experimental: Wait for a specific condition on one or many resources.

Advanced Commands:
  adm             Tools for managing a cluster
  replace         Replace a resource by filename or stdin
  patch           Update field(s) of a resource using strategic merge patch
  process         Process a template into list of resources
  extract         Extract secrets or config maps to disk
  observe         Observe changes to resources and react to them (experimental)
  policy          Manage authorization policy
  auth            Inspect authorization
  convert         Convert config files between different API versions
  image           Useful commands for managing images
  registry        Commands for working with the registry
  idle            Idle scalable resources
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  api-resources   Print the supported API resources on the server
  cluster-info    Display cluster info
  diff            Diff live version against would-be applied version
  kustomize       Build a kustomization target from a directory or a remote url.

Settings Commands:
  logout          End the current server session
  config          Modify kubeconfig files
  whoami          Return information about the current session
  completion      Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  ex              Experimental commands under active development
  help            Help about any command
  plugin          Provides utilities for interacting with plugins.
  version         Print the client and server version information

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get --help
Display one or many resources

 Prints a table of the most important information about the specified resources. You can filter the list using a label
selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

 Uninitialized objects are not shown unless --include-uninitialized is passed.

 By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter
the attributes of the fetched resources.

 Use "oc api-resources" for a complete list of supported resources.

Usage:
  oc get
[(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]
(TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]

Examples:
  # List all pods in ps output format.
  oc get pods
  
  # List all pods in ps output format with more information (such as node name).
  oc get pods -o wide
  
  # List a single replication controller with specified NAME in ps output format.
  oc get replicationcontroller web
  
  # List deployments in JSON output format, in the "v1" version of the "apps" API group:
  oc get deployments.v1.apps -o json
  
  # List a single pod in JSON output format.
  oc get -o json pod web-pod-13je7
  
  # List a pod identified by type and name specified in "pod.yaml" in JSON output format.
  oc get -f pod.yaml -o json
  
  # List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml.
  oc get -k dir/
  
  # Return only the phase value of the specified pod.
  oc get -o template pod/web-pod-13je7 --template={{.status.phase}}
  
  # List resource information in custom columns.
  oc get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image
  
  # List all replication controllers and services together in ps output format.
  oc get rc,services
  
  # List one or more resources by their type and names.
  oc get rc/web service/frontend pods/web-pod-13je7

Options:
  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current
context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and
may change in the future.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are
case-sensitive. You can also use multiple flag options like -L label1 -L label2...
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print
headers).
  -o, --output='': Output format. One of:
json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...
See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template
[http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template
[http://kubernetes.io/docs/user-guide/jsonpath].
      --output-watch-events=false: Output watch event objects when --watch or --watch-only is used. Existing objects are
output as initial ADDED events.
      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --server-print=true: If true, have the server return the appropriate table output. Supports extension APIs and
CRDs.
      --show-kind=false: If present, list the resource type for the requested object(s).
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed
as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression
must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The
template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded
if no object name is provided.
      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ oc get --h
Error: unknown flag: --h
See 'oc get --help' for usage.
[student@workstation ~]$ 
[student@workstation ~]$ oc get -h
Display one or many resources

 Prints a table of the most important information about the specified resources. You can filter the list using a label
selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

 Uninitialized objects are not shown unless --include-uninitialized is passed.

 By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter
the attributes of the fetched resources.

 Use "oc api-resources" for a complete list of supported resources.

Usage:
  oc get
[(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]
(TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]

Examples:
  # List all pods in ps output format.
  oc get pods
  
  # List all pods in ps output format with more information (such as node name).
  oc get pods -o wide
  
  # List a single replication controller with specified NAME in ps output format.
  oc get replicationcontroller web
  
  # List deployments in JSON output format, in the "v1" version of the "apps" API group:
  oc get deployments.v1.apps -o json
  
  # List a single pod in JSON output format.
  oc get -o json pod web-pod-13je7
  
  # List a pod identified by type and name specified in "pod.yaml" in JSON output format.
  oc get -f pod.yaml -o json
  
  # List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml.
  oc get -k dir/
  
  # Return only the phase value of the specified pod.
  oc get -o template pod/web-pod-13je7 --template={{.status.phase}}
  
  # List resource information in custom columns.
  oc get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image
  
  # List all replication controllers and services together in ps output format.
  oc get rc,services
  
  # List one or more resources by their type and names.
  oc get rc/web service/frontend pods/web-pod-13je7

Options:
  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current
context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and
may change in the future.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are
case-sensitive. You can also use multiple flag options like -L label1 -L label2...
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print
headers).
  -o, --output='': Output format. One of:
json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...
See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template
[http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template
[http://kubernetes.io/docs/user-guide/jsonpath].
      --output-watch-events=false: Output watch event objects when --watch or --watch-only is used. Existing objects are
output as initial ADDED events.
      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --server-print=true: If true, have the server return the appropriate table output. Supports extension APIs and
CRDs.
      --show-kind=false: If present, list the resource type for the requested object(s).
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed
as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression
must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The
template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded
if no object name is provided.
      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  lab openshift-s2i start

Setting up workstation for the Guided Excercise: Creating a Containerized Application with Source-to-Image

 · Installing the tree command.................................  ^[[F^[[F^[[FSUCCESS
 Checking local clone of the applications repository:
 · Folder '/home/student/DO180-apps' is a git repo.............  SUCCESS
 · Git repo '/home/student/DO180-apps' has no pending changes..  SUCCESS
 Verifying the OpenShift cluster is running:
 · Log in on OpenShift.........................................  SUCCESS
 · Check the internal registry is up and running...............  SUCCESS
 · Ensuring the 'lizwbb-s2i' project does not exist............  SUCCESS
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ pwd
/home/student
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ ls -l
total 0
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Desktop
drwxr-xr-x. 4 root    root     35 Dec  1 01:14 DO180
drwxrwxr-x. 9 student student 155 Nov 30 22:08 DO180-apps
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Documents
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Downloads
-rw-rw-r--. 1 student student   0 Dec  1 00:23 -e
drwxrwxr-x. 3 student student  19 Dec  1 03:27 local
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Music
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Pictures
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Public
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Templates
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Videos
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ cd ~/DO180-apps
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls -l
total 8
drwxrwxr-x. 2 student student 23 Nov 30 22:06 example
drwxrwxr-x. 2 student student 43 Nov 30 22:06 nodejs-app
drwxrwxr-x. 2 student student 40 Nov 30 22:06 nodejs-helloworld
drwxrwxr-x. 2 student student 23 Nov 30 22:06 php-helloworld
-rw-rw-r--. 1 student student 54 Nov 30 22:06 README.md
drwxrwxr-x. 2 student student 23 Nov 30 22:06 temps
-rw-rw-r--. 1 student student  7 Nov 30 22:31 TEST
drwxrwxr-x. 5 student student 51 Nov 30 22:06 todoapp
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git checkout -b s2i
Switched to a new branch 's2i'
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git push -u origin s2i
Username for 'https://github.com': sugitatokio
Password for 'https://sugitatokio@github.com': 
Total 0 (delta 0), reused 0 (delta 0)
remote: 
remote: Create a pull request for 's2i' on GitHub by visiting:
remote:      https://github.com/sugitatokio/DO180-apps/pull/new/s2i
remote: 
To https://github.com/sugitatokio/DO180-apps
 * [new branch]      s2i -> s2i
Branch 's2i' set up to track remote branch 's2i' from 'origin'.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls- l/home/student/DO180-apps/php-helloworld ^C
[student@workstation DO180-apps]$ ls -l /home/student/DO180-apps/php-helloworld 
total 4
-rw-rw-r--. 1 student student 69 Nov 30 22:06 index.php
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ vi /home/student/DO180-apps/php-helloworld/index.php
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ cat /home/student/DO180-apps/php-helloworld/index.php
<?php
print "Hello, World! php version is " . PHP_VERSION . "\n";
?>
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ source /usr/local/etc/ocp4.config
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  oc login -u ${RHT_OCP4_DEV_USER} -p \
> ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
Login successful.

You have one project on this server: "lizwbb-mysql-openshift"

Using project "lizwbb-mysql-openshift".
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  oc new-project ${RHT_OCP4_DEV_USER}-s2i
Now using project "lizwbb-s2i" on server "https://api.ap46.prod.nextcle.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app rails-postgresql-example

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname

[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc get project
NAME                     DISPLAY NAME   STATUS
lizwbb-mysql-openshift                  Active
lizwbb-s2i                              Active
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc project
Using project "lizwbb-s2i" on server "https://api.ap46.prod.nextcle.com:6443".
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc new-app php:7.3 --name=php-helloworld \
>  https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps#s2i \
>  --context-dir php-helloworld
--> Found image a16f1b1 (13 days old) in image stream "openshift/php" under tag "7.3" for "php:7.3"

    Apache 2.4 with PHP 7.3 
    ----------------------- 
    PHP 7.3 available as container is a base platform for building and running various PHP 7.3 applications and frameworks. PHP is an HTML-embedded scripting language. PHP attempts to make it easy for developers to write dynamically generated web pages. PHP also offers built-in database integration for several commercial and non-commercial database management systems, so writing a database-enabled webpage with PHP is fairly simple. The most common use of PHP coding is probably as a replacement for CGI scripts.

    Tags: builder, php, php73, rh-php73

    * The source repository appears to match: php
    * A source build using source code from https://github.com/sugitatokio/DO180-apps#s2i will be created
      * The resulting image will be pushed to image stream tag "php-helloworld:latest"
      * Use 'oc start-build' to trigger a new build

--> Creating resources ...
    imagestream.image.openshift.io "php-helloworld" created
    buildconfig.build.openshift.io "php-helloworld" created
    deployment.apps "php-helloworld" created
    service "php-helloworld" created
--> Success
    Build scheduled, use 'oc logs -f buildconfig/php-helloworld' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose service/php-helloworld' 
    Run 'oc status' to view your app.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc get pods
NAME                     READY   STATUS    RESTARTS   AGE
php-helloworld-1-build   1/1     Running   0          32s
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  oc logs --all-containers \
> -f php-helloworld-1-build
Caching blobs under "/var/cache/blobs".
Getting image source signatures
Copying blob sha256:1b7989535138a9719bd7bafb4262816ff5424bdc0a8b0436af92752e518d1758
Copying blob sha256:c41682d91320e2194683fbdb69a0de8878bc104f3bad9ca5a0ab47747ff8e5ee
Copying blob sha256:a8ee82b4607e664042846e2f02f659e7390570a407da7b85e29367284089c3ac
Copying blob sha256:3cfc58166ed8e9b08bd44e94ea5b30bce31e4e4e014e0de2e82275878a5025fa
Copying blob sha256:efb1ebb88a877265b856c6f5c4a3f0ce4333e56fe2ca9d21988e173d29eabcb7
Copying config sha256:a16f1b11e4f2305dab2a3a203027673def68491cddf7e210f1f7a6890d6c6713
Writing manifest to image destination
Storing signatures
Generating dockerfile with builder image image-registry.openshift-image-registry.svc:5000/openshift/php@sha256:d11ef88b889c14c228947fe717c481c7f6dc8d599f79f101f4b64bd809a935d1
STEP 1: FROM image-registry.openshift-image-registry.svc:5000/openshift/php@sha256:d11ef88b889c14c228947fe717c481c7f6dc8d599f79f101f4b64bd809a935d1
STEP 2: LABEL "io.openshift.build.source-context-dir"="php-helloworld"       "io.openshift.build.image"="image-registry.openshift-image-registry.svc:5000/openshift/php@sha256:d11ef88b889c14c228947fe717c481c7f6dc8d599f79f101f4b64bd809a935d1"       "io.openshift.build.commit.author"="Jordi Sola <someth2say@gmail.com>"       "io.openshift.build.commit.date"="Fri Oct 4 13:04:03 2019 +0200"       "io.openshift.build.commit.id"="f7cd8963ef353d9173c3a21dcccf402f3616840b"       "io.openshift.build.commit.ref"="s2i"       "io.openshift.build.commit.message"="Initial commit, including all apps previously in course"       "io.openshift.build.source-location"="https://github.com/sugitatokio/DO180-apps"
STEP 3: ENV OPENSHIFT_BUILD_NAME="php-helloworld-1"     OPENSHIFT_BUILD_NAMESPACE="lizwbb-s2i"     OPENSHIFT_BUILD_SOURCE="https://github.com/sugitatokio/DO180-apps"     OPENSHIFT_BUILD_REFERENCE="s2i"     OPENSHIFT_BUILD_COMMIT="f7cd8963ef353d9173c3a21dcccf402f3616840b"
STEP 4: USER root
STEP 5: COPY upload/src /tmp/src
STEP 6: RUN chown -R 1001:0 /tmp/src
time="2021-12-03T02:10:59Z" level=warning msg="Path \"/run/secrets/etc-pki-entitlement\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
time="2021-12-03T02:10:59Z" level=warning msg="Path \"/run/secrets/redhat.repo\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
STEP 7: USER 1001
STEP 8: RUN /usr/libexec/s2i/assemble
time="2021-12-03T02:10:59Z" level=warning msg="Path \"/run/secrets/etc-pki-entitlement\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
time="2021-12-03T02:10:59Z" level=warning msg="Path \"/run/secrets/redhat.repo\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
---> Installing application source...
=> sourcing 20-copy-config.sh ...
---> 02:11:00     Processing additional arbitrary httpd configuration provided by s2i ...
=> sourcing 00-documentroot.conf ...
=> sourcing 50-mpm-tuning.conf ...
=> sourcing 40-ssl-certs.sh ...
STEP 9: CMD /usr/libexec/s2i/run
STEP 10: COMMIT temp.builder.openshift.io/lizwbb-s2i/php-helloworld-1:df8c9150
Getting image source signatures
Copying blob sha256:764992a3f1da6cdf0297c106360c696027ac344f7d1166b8dbe9dcb8faede734
Copying blob sha256:c482617f0a052a8721c26f201c4ae427cc0adb5cfa5835793ed5a32574cf0691
Copying blob sha256:119e230340b453c118218f47fb299891334e16a313ae98bb5be5d3914c346286
Copying blob sha256:761f770b8253acbeb9a3097e03f05977ac6571f6017e3aeea83b0981a6973093
Copying blob sha256:3d172052f4ff2a78d506ad567309e57a1fa8b5086922da5880406247db1761fe
Copying blob sha256:c115e47034206a278372b5910d74cd986079b2b1ab0f0d4c138f66e8071c6381
Copying config sha256:1b2b2fcb673e60d5798a010c912470225d27b13939e24bed36aafc0358e7b57f
Writing manifest to image destination
Storing signatures
--> 1b2b2fcb673
1b2b2fcb673e60d5798a010c912470225d27b13939e24bed36aafc0358e7b57f

Pushing image image-registry.openshift-image-registry.svc:5000/lizwbb-s2i/php-helloworld:latest ...
Getting image source signatures
Copying blob sha256:c115e47034206a278372b5910d74cd986079b2b1ab0f0d4c138f66e8071c6381
Copying blob sha256:a8ee82b4607e664042846e2f02f659e7390570a407da7b85e29367284089c3ac
Copying blob sha256:1b7989535138a9719bd7bafb4262816ff5424bdc0a8b0436af92752e518d1758
Copying blob sha256:c41682d91320e2194683fbdb69a0de8878bc104f3bad9ca5a0ab47747ff8e5ee
Copying blob sha256:efb1ebb88a877265b856c6f5c4a3f0ce4333e56fe2ca9d21988e173d29eabcb7
Copying blob sha256:3cfc58166ed8e9b08bd44e94ea5b30bce31e4e4e014e0de2e82275878a5025fa
Copying config sha256:1b2b2fcb673e60d5798a010c912470225d27b13939e24bed36aafc0358e7b57f
Writing manifest to image destination
Storing signatures
Successfully pushed image-registry.openshift-image-registry.svc:5000/lizwbb-s2i/php-helloworld@sha256:fd1541926b3f84954659d060131a5a3364e1758854ee1e156ec9a3206187b95c
Push successful
Cloning "https://github.com/sugitatokio/DO180-apps" ...
	Commit:	f7cd8963ef353d9173c3a21dcccf402f3616840b (Initial commit, including all apps previously in course)
	Author:	Jordi Sola <someth2say@gmail.com>
	Date:	Fri Oct 4 13:04:03 2019 +0200
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc describe deployment/php-helloworld
Name:                   php-helloworld
Namespace:              lizwbb-s2i
CreationTimestamp:      Thu, 02 Dec 2021 21:10:29 -0500
Labels:                 app=php-helloworld
                        app.kubernetes.io/component=php-helloworld
                        app.kubernetes.io/instance=php-helloworld
Annotations:            deployment.kubernetes.io/revision: 2
                        image.openshift.io/triggers:
                          [{"from":{"kind":"ImageStreamTag","name":"php-helloworld:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"php-helloworld\")...
                        openshift.io/generated-by: OpenShiftNewApp
Selector:               deployment=php-helloworld
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:       deployment=php-helloworld
  Annotations:  openshift.io/generated-by: OpenShiftNewApp
  Containers:
   php-helloworld:
    Image:        image-registry.openshift-image-registry.svc:5000/lizwbb-s2i/php-helloworld@sha256:fd1541926b3f84954659d060131a5a3364e1758854ee1e156ec9a3206187b95c
    Ports:        8080/TCP, 8443/TCP
    Host Ports:   0/TCP, 0/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   php-helloworld-59d478c6d5 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  86s   deployment-controller  Scaled up replica set php-helloworld-7595dffb9d to 1
  Normal  ScalingReplicaSet  53s   deployment-controller  Scaled up replica set php-helloworld-59d478c6d5 to 1
  Normal  ScalingReplicaSet  49s   deployment-controller  Scaled down replica set php-helloworld-7595dffb9d to 0
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  oc expose service php-helloworld \
> --name ${RHT_OCP4_DEV_USER}-helloworld
route.route.openshift.io/lizwbb-helloworld exposed
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  oc get route -o jsonpath='{..spec.host}{"\n"}'
lizwbb-helloworld-lizwbb-s2i.apps.ap46.prod.nextcle.com
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ curl -s \
>  ${RHT_OCP4_DEV_USER}-helloworld-${RHT_OCP4_DEV_USER}-s2i.\
>  ${RHT_OCP4_WILDCARD_DOMAIN}
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  cd ~/DO180-apps/php-helloworld
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ ls -ls
total 4
4 -rw-rw-r--. 1 student student 69 Nov 30 22:06 index.php
[student@workstation php-helloworld]$ ls -l
total 4
-rw-rw-r--. 1 student student 69 Nov 30 22:06 index.php
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ vi index.php
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ git add .
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$  git commit -m 'Changed index page contents.'
[s2i ac11b31] Changed index page contents.
 1 file changed, 1 insertion(+)
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ git push origin s2i
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 419 bytes | 419.00 KiB/s, done.
Total 4 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/sugitatokio/DO180-apps
   f7cd896..ac11b31  s2i -> s2i
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ oc start-build php-helloworld
build.build.openshift.io/php-helloworld-2 started
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ oc logs php-helloworld-2-build -f
Caching blobs under "/var/cache/blobs".
Getting image source signatures
Copying blob sha256:a8ee82b4607e664042846e2f02f659e7390570a407da7b85e29367284089c3ac
Copying blob sha256:3cfc58166ed8e9b08bd44e94ea5b30bce31e4e4e014e0de2e82275878a5025fa
Copying blob sha256:1b7989535138a9719bd7bafb4262816ff5424bdc0a8b0436af92752e518d1758
Copying blob sha256:efb1ebb88a877265b856c6f5c4a3f0ce4333e56fe2ca9d21988e173d29eabcb7
Copying blob sha256:c41682d91320e2194683fbdb69a0de8878bc104f3bad9ca5a0ab47747ff8e5ee
Copying config sha256:a16f1b11e4f2305dab2a3a203027673def68491cddf7e210f1f7a6890d6c6713
Writing manifest to image destination
Storing signatures
Generating dockerfile with builder image image-registry.openshift-image-registry.svc:5000/openshift/php@sha256:d11ef88b889c14c228947fe717c481c7f6dc8d599f79f101f4b64bd809a935d1
STEP 1: FROM image-registry.openshift-image-registry.svc:5000/openshift/php@sha256:d11ef88b889c14c228947fe717c481c7f6dc8d599f79f101f4b64bd809a935d1
STEP 2: LABEL "io.openshift.build.source-context-dir"="php-helloworld"       "io.openshift.build.image"="image-registry.openshift-image-registry.svc:5000/openshift/php@sha256:d11ef88b889c14c228947fe717c481c7f6dc8d599f79f101f4b64bd809a935d1"       "io.openshift.build.commit.author"="Student User <student@workstation.lab.example.com>"       "io.openshift.build.commit.date"="Thu Dec 2 21:16:39 2021 -0500"       "io.openshift.build.commit.id"="ac11b313499d04f6d561076e2e86f8f8202915b3"       "io.openshift.build.commit.ref"="s2i"       "io.openshift.build.commit.message"="Changed index page contents."       "io.openshift.build.source-location"="https://github.com/sugitatokio/DO180-apps"
STEP 3: ENV OPENSHIFT_BUILD_NAME="php-helloworld-2"     OPENSHIFT_BUILD_NAMESPACE="lizwbb-s2i"     OPENSHIFT_BUILD_SOURCE="https://github.com/sugitatokio/DO180-apps"     OPENSHIFT_BUILD_REFERENCE="s2i"     OPENSHIFT_BUILD_COMMIT="ac11b313499d04f6d561076e2e86f8f8202915b3"
STEP 4: USER root
STEP 5: COPY upload/src /tmp/src
STEP 6: RUN chown -R 1001:0 /tmp/src
time="2021-12-03T02:18:43Z" level=warning msg="Path \"/run/secrets/etc-pki-entitlement\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
time="2021-12-03T02:18:43Z" level=warning msg="Path \"/run/secrets/redhat.repo\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
STEP 7: USER 1001
STEP 8: RUN /usr/libexec/s2i/assemble
time="2021-12-03T02:18:44Z" level=warning msg="Path \"/run/secrets/etc-pki-entitlement\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
time="2021-12-03T02:18:44Z" level=warning msg="Path \"/run/secrets/redhat.repo\" from \"/etc/containers/mounts.conf\" doesn't exist, skipping"
---> Installing application source...
=> sourcing 20-copy-config.sh ...
---> 02:18:44     Processing additional arbitrary httpd configuration provided by s2i ...
=> sourcing 00-documentroot.conf ...
=> sourcing 50-mpm-tuning.conf ...
=> sourcing 40-ssl-certs.sh ...
STEP 9: CMD /usr/libexec/s2i/run
STEP 10: COMMIT temp.builder.openshift.io/lizwbb-s2i/php-helloworld-2:dd55c58d
Getting image source signatures
Copying blob sha256:764992a3f1da6cdf0297c106360c696027ac344f7d1166b8dbe9dcb8faede734
Copying blob sha256:c482617f0a052a8721c26f201c4ae427cc0adb5cfa5835793ed5a32574cf0691
Copying blob sha256:119e230340b453c118218f47fb299891334e16a313ae98bb5be5d3914c346286
Copying blob sha256:761f770b8253acbeb9a3097e03f05977ac6571f6017e3aeea83b0981a6973093
Copying blob sha256:3d172052f4ff2a78d506ad567309e57a1fa8b5086922da5880406247db1761fe
Copying blob sha256:cffdd65015a1dab83b09749569369a687f4b168c797853eff7d26fb61bbb56a8
Copying config sha256:cd50193878fc13622b2efa395ab7c0606b8793a2be43e5c1d1c0a03d74754b60
Writing manifest to image destination
Storing signatures
--> cd50193878f
cd50193878fc13622b2efa395ab7c0606b8793a2be43e5c1d1c0a03d74754b60

Pushing image image-registry.openshift-image-registry.svc:5000/lizwbb-s2i/php-helloworld:latest ...
Getting image source signatures
Copying blob sha256:c41682d91320e2194683fbdb69a0de8878bc104f3bad9ca5a0ab47747ff8e5ee
Copying blob sha256:efb1ebb88a877265b856c6f5c4a3f0ce4333e56fe2ca9d21988e173d29eabcb7
Copying blob sha256:3cfc58166ed8e9b08bd44e94ea5b30bce31e4e4e014e0de2e82275878a5025fa
Copying blob sha256:a8ee82b4607e664042846e2f02f659e7390570a407da7b85e29367284089c3ac
Copying blob sha256:1b7989535138a9719bd7bafb4262816ff5424bdc0a8b0436af92752e518d1758
Copying blob sha256:cffdd65015a1dab83b09749569369a687f4b168c797853eff7d26fb61bbb56a8
Copying config sha256:cd50193878fc13622b2efa395ab7c0606b8793a2be43e5c1d1c0a03d74754b60
Writing manifest to image destination
Storing signatures
Successfully pushed image-registry.openshift-image-registry.svc:5000/lizwbb-s2i/php-helloworld@sha256:8edc079bca8952fa7390a39048245268e60fd4a2cf5bfd26295ec20d3948e882
Push successful
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ oc get pods
NAME                              READY   STATUS        RESTARTS   AGE
php-helloworld-1-build            0/1     Completed     0          8m31s
php-helloworld-2-build            0/1     Completed     0          50s
php-helloworld-59d478c6d5-j9k6j   0/1     Terminating   0          7m59s
php-helloworld-7787cfc668-lx6tb   1/1     Running       0          15s
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$  curl -s \
> ${RHT_OCP4_DEV_USER}-helloworld-${RHT_OCP4_DEV_USER}-s2i.\
> ${RHT_OCP4_WILDCARD_DOMAIN}
Hello, World! php version is 7.3.29
A change is a coming!
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ lab openshift-s2i finish

Completing the Guided Excercise: Creating a Containerized Application with Source-to-Image

 · Log in on OpenShift.........................................  SUCCESS
 · Deleting the 'lizwbb-s2i' project...........................  SUCCESS
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ echo $
$
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$  lab openshift-webconsole start

Setting up workstation for the Guided Exercise: Creating an Application with the Web Console

 Verifying the OpenShift cluster is running:
 · Log in on OpenShift.........................................  SUCCESS
 · Check the internal registry is up and running...............  SUCCESS
 · Ensuring the 'lizwbb-console' project does not exist........  SUCCESS

[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$  cd ~/DO180-apps
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git checkout -b console
Switched to a new branch 'console'
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  git push -u origin console
Username for 'https://github.com': sugitatokio
Password for 'https://sugitatokio@github.com': 
Total 0 (delta 0), reused 0 (delta 0)
remote: 
remote: Create a pull request for 'console' on GitHub by visiting:
remote:      https://github.com/sugitatokio/DO180-apps/pull/new/console
remote: 
To https://github.com/sugitatokio/DO180-apps
 * [new branch]      console -> console
Branch 'console' set up to track remote branch 'console' from 'origin'.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  source /usr/local/etc/ocp4.config
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  echo $RHT_OCP4_WILDCARD_DOMAIN
apps.ap46.prod.nextcle.com
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  lab openshift-s2i start

Setting up workstation for the Guided Excercise: Creating a Containerized Application with Source-to-Image

 · Installing the tree command.................................  SUCCESS
 Checking local clone of the applications repository:
 · Folder '/home/student/DO180-apps' is a git repo.............  SUCCESS
 · Git repo '/home/student/DO180-apps' has no pending changes..  SUCCESS
 Verifying the OpenShift cluster is running:
 · Log in on OpenShift.........................................  SUCCESS
 · Check the internal registry is up and running...............  SUCCESS
 · Ensuring the 'lizwbb-s2i' project does not exist............  SUCCESS
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls -l
total 4
drwxrwxr-x. 2 student student 23 Nov 30 22:06 example
drwxrwxr-x. 2 student student 43 Nov 30 22:06 nodejs-app
drwxrwxr-x. 2 student student 40 Nov 30 22:06 nodejs-helloworld
drwxrwxr-x. 2 student student 23 Dec  2 21:41 php-helloworld
-rw-rw-r--. 1 student student 54 Nov 30 22:06 README.md
drwxrwxr-x. 2 student student 23 Nov 30 22:06 temps
drwxrwxr-x. 5 student student 51 Nov 30 22:06 todoapp
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ cd ~/DO180-apps
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ cd 
[student@workstation ~]$ 
[student@workstation ~]$ ls -l
total 0
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Desktop
drwxr-xr-x. 4 root    root     35 Dec  1 01:14 DO180
drwxrwxr-x. 9 student student 143 Dec  2 21:03 DO180-apps
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Documents
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Downloads
-rw-rw-r--. 1 student student   0 Dec  1 00:23 -e
drwxrwxr-x. 3 student student  19 Dec  1 03:27 local
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Music
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Pictures
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Public
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Templates
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Videos
[student@workstation ~]$ 
[student@workstation ~]$ cd ~/DO180-apps
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ git checkout -b s2i
fatal: A branch named 's2i' already exists.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  git push -u origin s2i
Username for 'https://github.com': sugitatokio
Password for 'https://sugitatokio@github.com': 
Branch 's2i' set up to track remote branch 's2i' from 'origin'.
Everything up-to-date
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc login -u ${RHT_OCP4_DEV_USER} -p \
> ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
Login successful.

You have access to the following projects and can switch between them with ' project <projectname>':

  * lizwbb-mysql-openshift
    sugitatokio

Using project "lizwbb-mysql-openshift".
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc new-project ${RHT_OCP4_DEV_USER}-s2i
Now using project "lizwbb-s2i" on server "https://api.ap46.prod.nextcle.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app rails-postgresql-example

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname

[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls -l
total 4
drwxrwxr-x. 2 student student 23 Nov 30 22:06 example
drwxrwxr-x. 2 student student 43 Nov 30 22:06 nodejs-app
drwxrwxr-x. 2 student student 40 Nov 30 22:06 nodejs-helloworld
drwxrwxr-x. 2 student student 23 Dec  2 21:41 php-helloworld
-rw-rw-r--. 1 student student 54 Nov 30 22:06 README.md
drwxrwxr-x. 2 student student 23 Nov 30 22:06 temps
drwxrwxr-x. 5 student student 51 Nov 30 22:06 todoapp
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc new-app php:7.3 --name=php-helloworld \
>  https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps#s2i \
>  --context-dir php-helloworld
--> Found image a16f1b1 (13 days old) in image stream "openshift/php" under tag "7.3" for "php:7.3"

    Apache 2.4 with PHP 7.3 
    ----------------------- 
    PHP 7.3 available as container is a base platform for building and running various PHP 7.3 applications and frameworks. PHP is an HTML-embedded scripting language. PHP attempts to make it easy for developers to write dynamically generated web pages. PHP also offers built-in database integration for several commercial and non-commercial database management systems, so writing a database-enabled webpage with PHP is fairly simple. The most common use of PHP coding is probably as a replacement for CGI scripts.

    Tags: builder, php, php73, rh-php73

    * The source repository appears to match: php
    * A source build using source code from https://github.com/sugitatokio/DO180-apps#s2i will be created
      * The resulting image will be pushed to image stream tag "php-helloworld:latest"
      * Use 'oc start-build' to trigger a new build

--> Creating resources ...
    imagestream.image.openshift.io "php-helloworld" created
    buildconfig.build.openshift.io "php-helloworld" created
    deployment.apps "php-helloworld" created
    service "php-helloworld" created
--> Success
    Build scheduled, use 'oc logs -f buildconfig/php-helloworld' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose service/php-helloworld' 
    Run 'oc status' to view your app.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc status
In project lizwbb-s2i on server https://api.ap46.prod.nextcle.com:6443

svc/php-helloworld - 172.30.160.69 ports 8080, 8443
  deployment/php-helloworld deploys istag/php-helloworld:latest <-
    bc/php-helloworld source builds https://github.com/sugitatokio/DO180-apps#s2i on openshift/php:7.3 
      build #1 running for 7 seconds - ac11b31: Changed index page contents. (Student User <student@workstation.lab.example.com>)
    deployment #1 running for 8 seconds - 0/1 pods growing to 1


1 info identified, use 'oc status --suggest' to see details.
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc get pods
NAME                              READY   STATUS      RESTARTS   AGE
php-helloworld-1-build            0/1     Completed   0          59s
php-helloworld-6c47446684-mx2hp   1/1     Running     0          28s
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc describe deployment/php-helloworld
Name:                   php-helloworld
Namespace:              lizwbb-s2i
CreationTimestamp:      Thu, 02 Dec 2021 22:40:17 -0500
Labels:                 app=php-helloworld
                        app.kubernetes.io/component=php-helloworld
                        app.kubernetes.io/instance=php-helloworld
Annotations:            deployment.kubernetes.io/revision: 2
                        image.openshift.io/triggers:
                          [{"from":{"kind":"ImageStreamTag","name":"php-helloworld:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"php-helloworld\")...
                        openshift.io/generated-by: OpenShiftNewApp
Selector:               deployment=php-helloworld
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:       deployment=php-helloworld
  Annotations:  openshift.io/generated-by: OpenShiftNewApp
  Containers:
   php-helloworld:
    Image:        image-registry.openshift-image-registry.svc:5000/lizwbb-s2i/php-helloworld@sha256:f649efd356865c6b090879e321b65854aa07beb4429b15138f68327332800b55
    Ports:        8080/TCP, 8443/TCP
    Host Ports:   0/TCP, 0/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   php-helloworld-6c47446684 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  79s   deployment-controller  Scaled up replica set php-helloworld-7595dffb9d to 1
  Normal  ScalingReplicaSet  47s   deployment-controller  Scaled up replica set php-helloworld-6c47446684 to 1
  Normal  ScalingReplicaSet  43s   deployment-controller  Scaled down replica set php-helloworld-7595dffb9d to 0
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ oc expose service php-helloworld \
> --name ${RHT_OCP4_DEV_USER}-helloworld
route.route.openshift.io/lizwbb-helloworld exposed
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  oc get route -o jsonpath='{..spec.host}{"\n"}'
lizwbb-helloworld-lizwbb-s2i.apps.ap46.prod.nextcle.com
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$  cd ~/DO180-apps/php-helloworld
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ cd ..
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls -l
total 4
drwxrwxr-x. 2 student student 23 Nov 30 22:06 example
drwxrwxr-x. 2 student student 43 Nov 30 22:06 nodejs-app
drwxrwxr-x. 2 student student 40 Nov 30 22:06 nodejs-helloworld
drwxrwxr-x. 2 student student 23 Dec  2 21:41 php-helloworld
-rw-rw-r--. 1 student student 54 Nov 30 22:06 README.md
drwxrwxr-x. 2 student student 23 Nov 30 22:06 temps
drwxrwxr-x. 5 student student 51 Nov 30 22:06 todoapp
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ cd php-helloworld/
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ ls -l
total 4
-rw-rw-r--. 1 student student 69 Dec  2 21:41 index.php
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ 
[student@workstation php-helloworld]$ cd
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  lab multicontainer-design start

Setting up workstation for the Guided Exercise: Connecting Web Application and MySQL Container

 · Downloading starter project.................................  SUCCESS
 · Downloading solution project................................  SUCCESS

Setup successful. Please proceed with the exercise.

[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ podman login registry.redhat.io
Authenticating with existing credentials...
Existing credentials are valid. Already logged in to registry.redhat.io
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ ip -br addr list | grep eth0
eth0             UP             172.25.250.9/24 fe80::ce7e:d28c:275:24d3/64 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  cd ~/DO180/labs/multicontainer-design/deploy/nodejs
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ls -l
total 12
-rwxrwxr-x. 1 student student 392 Aug 16 11:45 build.sh
-rw-rw-r--. 1 student student 232 Aug 16 11:45 Containerfile
drwxrwxr-x. 2 student student  66 Aug 16 11:45 networked
drwxrwxr-x. 5 student student 134 Aug 16 11:45 nodejs-source
-rwxrwxr-x. 1 student student  24 Aug 16 11:45 run.sh
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ./build.sh
Preparing build folder
STEP 1: FROM registry.redhat.io/rhel8/nodejs-12:1
Getting image source signatures
Copying blob 63f9f4c31162 skipped: already exists
Copying blob ce3c6836540f skipped: already exists
Copying blob d49355ce848e skipped: already exists
Copying blob d2395f347336 done
Copying blob 0fc972655972 done
Copying config cec04c560d done
Writing manifest to image destination
Storing signatures
STEP 2: ARG NEXUS_BASE_URL
STEP 3: MAINTAINER username <username@example.com>
STEP 4: COPY run.sh build ${HOME}/
STEP 5: RUN npm install --registry=http://$NEXUS_BASE_URL/repository/nodejs/
npm WARN deprecated formidable@1.2.6: Please upgrade to latest, formidable@v2 or formidable@v3! Check these notes: https://bit.ly/2ZEqIau
npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.

> dtrace-provider@0.8.8 install /opt/app-root/src/node_modules/dtrace-provider
> node-gyp rebuild || node suppress-error.js

gyp WARN install got an error, rolling back install
gyp ERR! configure error 
gyp ERR! stack Error: This is most likely not a problem with node-gyp or the package itself and
gyp ERR! stack is related to network connectivity. In most cases you are behind a proxy or have bad 
gyp ERR! stack network settings.
gyp ERR! stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/install.js:171:21)
gyp ERR! stack     at Request.emit (events.js:314:20)
gyp ERR! stack     at Request.onRequestError (/usr/lib/node_modules/npm/node_modules/request/request.js:881:8)
gyp ERR! stack     at ClientRequest.emit (events.js:314:20)
gyp ERR! stack     at TLSSocket.socketErrorListener (_http_client.js:427:9)
gyp ERR! stack     at TLSSocket.emit (events.js:314:20)
gyp ERR! stack     at emitErrorNT (internal/streams/destroy.js:92:8)
gyp ERR! stack     at emitErrorAndCloseNT (internal/streams/destroy.js:60:3)
gyp ERR! stack     at processTicksAndRejections (internal/process/task_queues.js:84:21)
gyp ERR! System Linux 4.18.0-193.14.3.el8_2.x86_64
gyp ERR! command "/usr/bin/node" "/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"
gyp ERR! cwd /opt/app-root/src/node_modules/dtrace-provider
gyp ERR! node -v v12.22.5
gyp ERR! node-gyp -v v5.1.0
gyp ERR! not ok 
npm notice created a lockfile as package-lock.json. You should commit this file.
added 144 packages from 261 contributors in 12.207s

8 packages are looking for funding
  run `npm fund` for details

STEP 6: EXPOSE	30080
STEP 7: CMD	["./run.sh"]
STEP 8: COMMIT do180/todonodejs
Getting image source signatures
Copying blob 0d3f22d60daf skipped: already exists
Copying blob 0488bd866f64 skipped: already exists
Copying blob 168d524b4a7c skipped: already exists
Copying blob 714b6d92c03a skipped: already exists
Copying blob 16f3e2a879ee skipped: already exists
Copying blob f90b25f3e26d done
Copying config 10c6736ff3 done
Writing manifest to image destination
Storing signatures
10c6736ff33dc9752be46bf12f35803fe34e18101656ecd407e79b368ab8db74
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$  podman images \
>  --format "table {{.ID}} {{.Repository}} {{.Tag}}"
IMAGE ID       REPOSITORY                             TAG
10c6736ff33d   localhost/do180/todonodejs             latest
0679f1f5594c   localhost/do180-custom-httpd2          latest
0679f1f5594c   quay.io/i3217194/do180-custom-httpd2   v1.0
943b84e316aa   <none>                                 <none>
f75e79554862   quay.io/i3217194/do180-custom-httpd    v1.0
9182338b5064   localhost/do180-custom-httpd           latest
cec04c560db4   registry.redhat.io/rhel8/nodejs-12     1
3fd7f77614f3   registry.redhat.io/rhel8/mysql-80      1
c137096dbe41   registry.redhat.io/rhel8/httpd-24      latest
613e5da7a934   registry.access.redhat.com/ubi8/ubi    8.3
4346d3cace25   quay.io/redhattraining/httpd-parent    latest
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ podman run -d --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
> -e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 \
> -v $PWD/work/data:/var/lib/mysql/data \
> -p 30306:3306 \
> registry.redhat.io/rhel8/mysql-80:1
Error: error checking path "/home/student/DO180/labs/multicontainer-design/deploy/nodejs/work/data": stat /home/student/DO180/labs/multicontainer-design/deploy/nodejs/work/data: no such file or directory
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ pwd
/home/student/DO180/labs/multicontainer-design/deploy/nodejs
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ls -l
total 12
drwxrwxr-x. 5 student student 102 Dec  2 23:35 build
-rwxrwxr-x. 1 student student 392 Aug 16 11:45 build.sh
-rw-rw-r--. 1 student student 232 Aug 16 11:45 Containerfile
drwxrwxr-x. 2 student student  66 Aug 16 11:45 networked
drwxrwxr-x. 5 student student 134 Aug 16 11:45 nodejs-source
-rwxrwxr-x. 1 student student  24 Aug 16 11:45 run.sh
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ mkdir -p ./work/data
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ls -l
total 12
drwxrwxr-x. 5 student student 102 Dec  2 23:35 build
-rwxrwxr-x. 1 student student 392 Aug 16 11:45 build.sh
-rw-rw-r--. 1 student student 232 Aug 16 11:45 Containerfile
drwxrwxr-x. 2 student student  66 Aug 16 11:45 networked
drwxrwxr-x. 5 student student 134 Aug 16 11:45 nodejs-source
-rwxrwxr-x. 1 student student  24 Aug 16 11:45 run.sh
drwxrwxr-x. 3 student student  18 Dec  2 23:42 work
[student@workstation nodejs]$ 
[student@workstation nodejs]$ vi run.sh
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ cat run.sh
#!/bin/sh

node app.js

podman run -d --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
-e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 \
-v $PWD/work/data:/var/lib/mysql/data \
-p 30306:3306 \
registry.redhat.io/rhel8/mysql-80:1

podman run -d --name todoapi -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
-e MYSQL_PASSWORD=mypa55 \
-p 30080:30080 \
do180/todonodejs
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ pwd
/home/student/DO180/labs/multicontainer-design/deploy/nodejs
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ls -l
total 12
drwxrwxr-x. 5 student student 102 Dec  2 23:35 build
-rwxrwxr-x. 1 student student 392 Aug 16 11:45 build.sh
-rw-rw-r--. 1 student student 232 Aug 16 11:45 Containerfile
drwxrwxr-x. 2 student student  66 Aug 16 11:45 networked
drwxrwxr-x. 5 student student 134 Aug 16 11:45 nodejs-source
-rwxrwxr-x. 1 student student 385 Dec  2 23:45 run.sh
drwxrwxr-x. 3 student student  18 Dec  2 23:42 work
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ls -l networked/
total 16
-rw-rw-r--. 1 student student 271 Aug 16 11:45 db.sql
-rw-rw-r--. 1 student student 154 Aug 16 11:45 README.md
-rwxrwxr-x. 1 student student 286 Aug 16 11:45 run.sh
-rwxrwxr-x. 1 student student 260 Aug 16 11:45 stop.sh
[student@workstation nodejs]$ 
[student@workstation nodejs]$ ls -l
total 12
drwxrwxr-x. 5 student student 102 Dec  2 23:35 build
-rwxrwxr-x. 1 student student 392 Aug 16 11:45 build.sh
-rw-rw-r--. 1 student student 232 Aug 16 11:45 Containerfile
drwxrwxr-x. 2 student student  66 Aug 16 11:45 networked
drwxrwxr-x. 5 student student 134 Aug 16 11:45 nodejs-source
-rwxrwxr-x. 1 student student 385 Dec  2 23:45 run.sh
drwxrwxr-x. 3 student student  18 Dec  2 23:42 work
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ cat ./networked/run.sh 
#!/bin/sh

if [ -d "work" ]; then
  sudo rm -fr work
fi

echo "Create database volume..."
mkdir -p work/data
sudo chcon -Rt container_file_t work
podman unshare chown -R 27:27 work



# TODO Add podman run for mysql image here

sleep 9

# TODO Add podman run for todonodejs image here

[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ cp -p run.sh ./networked/run.sh
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ 
[student@workstation nodejs]$ cd ./networked/
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ ls -l
total 16
-rw-rw-r--. 1 student student 271 Aug 16 11:45 db.sql
-rw-rw-r--. 1 student student 154 Aug 16 11:45 README.md
-rwxrwxr-x. 1 student student 385 Dec  2 23:45 run.sh
-rwxrwxr-x. 1 student student 260 Aug 16 11:45 stop.sh
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ cat run.sh 
#!/bin/sh

node app.js

podman run -d --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
-e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 \
-v $PWD/work/data:/var/lib/mysql/data \
-p 30306:3306 \
registry.redhat.io/rhel8/mysql-80:1

podman run -d --name todoapi -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
-e MYSQL_PASSWORD=mypa55 \
-p 30080:30080 \
do180/todonodejs
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ ^C
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ vi run.sh
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ cat run.sh
#!/bin/sh

if [ -d "work" ]; then
  sudo rm -fr work
fi

echo "Create database volume..."
mkdir -p work/data
sudo chcon -Rt container_file_t work
podman unshare chown -R 27:27 work



# TODO Add podman run for mysql image here

sleep 9

# TODO Add podman run for todonodejs image here

podman run -d --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
-e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 \
-v $PWD/work/data:/var/lib/mysql/data \
-p 30306:3306 \
registry.redhat.io/rhel8/mysql-80:1

podman run -d --name todoapi -e MYSQL_DATABASE=items -e MYSQL_USER=user1 \
-e MYSQL_PASSWORD=mypa55 \
-p 30080:30080 \
do180/todonodejs
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ ./run.sh
Create database volume...
b5018f90588617904ccf4b9cc0241e58f196a2c64c0ec881e6abe74fdfc9bed5
c64350ae3c877109176bb4b0848f1e89ce4fb267aa3111d777a7f0035f68064a
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ podman ps \
> --format="table {{.ID}} {{.Names}} {{.Image}} {{.Status}}"
ID             Names         Image                                      Status
c64350ae3c87   todoapi       localhost/do180/todonodejs:latest          Up About a minute ago
b5018f905886   mysql         registry.redhat.io/rhel8/mysql-80:1        Up About a minute ago
c3e9ca17e430   test-httpd    quay.io/i3217194/do180-custom-httpd:v1.0   Up 25 hours ago
0731864554a6   mysql-basic   registry.redhat.io/rhel8/mysql-80:1        Up 43 hours ago
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ mysql -uuser1 -h 172.25.250.9 \
> 
ERROR 2003 (HY000): Can't connect to MySQL server on '172.25.250.9' (111)
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ cat  /home/student/DO180/labs/multicontainer-design/deploy/nodejs/
cat: /home/student/DO180/labs/multicontainer-design/deploy/nodejs/: Is a directory
[student@workstation networked]$ 
[student@workstation networked]$ nodejs-source/models/db.js ^C
[student@workstation networked]$ 
[student@workstation networked]$ ls -l  /home/student/DO180/labs/multicontainer-design/deploy/nodejs/
total 12
drwxrwxr-x. 5 student student 102 Dec  2 23:35 build
-rwxrwxr-x. 1 student student 392 Aug 16 11:45 build.sh
-rw-rw-r--. 1 student student 232 Aug 16 11:45 Containerfile
drwxrwxr-x. 3 student student  78 Dec  2 23:49 networked
drwxrwxr-x. 5 student student 134 Aug 16 11:45 nodejs-source
-rwxrwxr-x. 1 student student 385 Dec  2 23:45 run.sh
drwxrwxr-x. 3 student student  18 Dec  2 23:42 work
[student@workstation networked]$ 
[student@workstation networked]$ nodejs-source/models/db.js ^C
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$  cat  /home/student/DO180/labs/multicontainer-design/deploy/nodejs/nodejs-source/models/db.js

module.exports.params = {
  dbname: process.env.MYSQL_DATABASE,
  username: process.env.MYSQL_USER,
  password: process.env.MYSQL_PASSWORD,
  params: {
      host: '172.25.250.9',
      port: '30306',
      dialect: 'mysql'
  }
};
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ mysql -uuser1 -h 172.25.250.9 \
> -pmypa55 -P30306 items < \
> /home/student/DO180/labs/multicontainer-design/deploy/nodejs/networked/db.sql
mysql: [Warning] Using a password on the command line interface can be insecure.
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ podman exec -it todoapi env
PATH=/opt/app-root/src/node_modules/.bin/:/opt/app-root/src/.npm-global/bin/:/opt/app-root/src/bin:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
TERM=xterm
HOSTNAME=
container=oci
PLATFORM=el8
MYSQL_PASSWORD=mypa55
SUMMARY=Platform for building and running Node.js 12 applications
HOME=/opt/app-root/src
NAME=nodejs
CNB_STACK_ID=com.redhat.stacks.ubi8-nodejs-12
CNB_USER_ID=1001
DESCRIPTION=Node.js 12 available as container is a base platform for building and running various Node.js 12 applications and frameworks. Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
STI_SCRIPTS_PATH=/usr/libexec/s2i
NODEJS_VERSION=12
NPM_RUN=start
MYSQL_DATABASE=items
NODEJS_VER=14
MYSQL_USER=user1
STI_SCRIPTS_URL=image:///usr/libexec/s2i
APP_ROOT=/opt/app-root
NPM_CONFIG_PREFIX=/opt/app-root/src/.npm-global
CNB_GROUP_ID=0
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$  curl -w "\n" \
> http://127.0.0.1:30080/todo/api/items/1
{"id":1,"description":"Pick up newspaper","done":false}
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ 
[student@workstation networked]$ cd 
[student@workstation ~]$ 
[student@workstation ~]$ lab multicontainer-design finish

Cleaning up the lab for Guided Exercise: Connecting Web Application and MySQL Container

 · Stopping mysql container....................................  SUCCESS
 · Removing mysql container....................................  SUCCESS
 · Stopping todoapi container..................................  SUCCESS
 · Removing todoapi container..................................  SUCCESS
 · Removing registry.redhat.io/rhel8/mysql-80:1 image..........  SUCCESS
 · Removing registry.redhat.io/rhel8/nodejs-12:1 image.........  SUCCESS
 · Removing do180/todonodejs image.............................  SUCCESS
 · Removing the project directory..............................  SUCCESS
 · Removing the solution directory.............................  SUCCESS
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ lab multicontainer-application start

Setting up workstation for the Guided Exercise: Creating an Application on OpenShift

 · Checking podman configuration...............................  SUCCESS

 Verifying the OpenShift cluster is running:
 · Log in on OpenShift.........................................  SUCCESS
 · Check the internal registry is up and running...............  SUCCESS
 · Ensure application project does not exist...................  SUCCESS
 · Downloading starter project.................................  SUCCESS
 · Downloading solution project................................  SUCCESS

Setup successful. Please proceed with the exercise.


[student@workstation ~]$ source /usr/local/etc/ocp4.config
[student@workstation ~]$ 
[student@workstation ~]$  oc login -u ${RHT_OCP4_DEV_USER} \
> -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
Login successful.

You have access to the following projects and can switch between them with ' project <projectname>':

    lizwbb-mysql-openshift
  * lizwbb-s2i
    sugitatokio

Using project "lizwbb-s2i".
[student@workstation ~]$  oc new-project ${RHT_OCP4_DEV_USER}-application
Now using project "lizwbb-application" on server "https://api.ap46.prod.nextcle.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app rails-postgresql-example

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname

[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ cd /home/student/DO180/labs/multicontainer-application
[student@workstation multicontainer-application]$ ls -l
total 8
-rw-rw-r--. 1 student student  300 Aug 16 11:45 db.sql
-rw-rw-r--. 1 student student 1799 Aug 16 11:45 todo-app.yml
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ at ^C
[student@workstation multicontainer-application]$ cat todo-app.yml
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      app: todonodejs
      name: mysql
    name: mysql
  spec:
    containers:
    - env:
      - name: MYSQL_ROOT_PASSWORD
        value: r00tpa55
      - name: MYSQL_USER
        value: user1
      - name: MYSQL_PASSWORD
        value: mypa55
      - name: MYSQL_DATABASE
        value: items
      image: registry.redhat.io/rhel8/mysql-80:1
      name: mysql
      ports:
      - containerPort: 3306
        name: mysql
      volumeMounts:
      - mountPath: /var/lib/mysql/data
        name: db-volume
    volumes:
    - name: db-volume
      persistentVolumeClaim:
        claimName: dbclaim

- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      app: todonodejs
      name: todoapi
    name: todoapi
  spec:
    containers:
    - env:
      - name: MYSQL_ENV_MYSQL_DATABASE
        value: items
      - name: MYSQL_ENV_MYSQL_USER
        value: user1
      - name: MYSQL_ENV_MYSQL_PASSWORD
        value: mypa55
      image: quay.io/redhattraining/do180-todonodejs-12
      name: todoapi
      ports:
      - containerPort: 30080
        name: nodejs-http
      resources:
        limits:
          cpu: "0.5"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: todonodejs
      name: todoapi
    name: todoapi
  spec:
    ports:
    - port: 30080
    selector:
      name: todoapi
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: todonodejs
      name: mysql
    name: mysql
  spec:
    ports:
    - port: 3306
    selector:
      name: mysql
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: todonodejs
    name: dbclaim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Mi
kind: List
metadata: {}
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$  oc create -f todo-app.yml
pod/mysql created
pod/todoapi created
service/todoapi created
service/mysql created
persistentvolumeclaim/dbclaim created
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ oc get pods -w
NAME      READY   STATUS              RESTARTS   AGE
mysql     0/1     ContainerCreating   0          10s
todoapi   1/1     Running             0          10s
mysql     0/1     ContainerCreating   0          10s
mysql     0/1     ContainerCreating   0          14s
mysql     1/1     Running             0          20s
^C[student@workstation multicontainer-application]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          42s
todoapi   1/1     Running   0          42s
^C[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$  oc port-forward mysql 3306:3306
Forwarding from 127.0.0.1:3306 -> 3306
Forwarding from [::1]:3306 -> 3306
^C[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$  cd /home/student/DO180/labs/multicontainer-application
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ ysql -uuser1 \^C
[student@workstation multicontainer-application]$ mysql -uuser1 \
>  -h 127.0.0.1 -pmypa55 -P3306 items < db.sql
mysql: [Warning] Using a password on the command line interface can be insecure.
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$  oc expose service todoapi
route.route.openshift.io/todoapi exposed
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ oc status | grep -o "http:.*com"
http://todoapi-lizwbb-application.apps.ap46.prod.nextcle.com
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$  curl -w "\n" \
> $(oc status | grep -o "http:.*com")/todo/api/items/1
{"id":1,"description":"Pick up newspaper","done":false}
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ echo $RHT_OCP4_DEV_USER
lizwbb
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ echo $RHT_OCP4_WILDCARD_DOMAIN
apps.ap46.prod.nextcle.com
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$  lab multicontainer-application finish

Completing the Guided Exercise: Creating an Application on OpenShift

 · Log in on OpenShift.........................................  SUCCESS
 · Removing lizwbb-application project.........................  SUCCESS
 · Removing the project directory..............................  SUCCESS
 · Removing the solution directory.............................  SUCCESS
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ 
[student@workstation multicontainer-application]$ cd
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  lab multicontainer-openshift start

Setting up workstation for the Guided Exercise: Creating an Application with a Template

 · Checking podman configuration...............................  SUCCESS

 Verifying the OpenShift cluster is running:
 · Log in on OpenShift.........................................  SUCCESS
 · Check the internal registry is up and running...............  
SUCCESS
 · Ensure template project does not exist......................  SUCCESS
 · Downloading starter project.................................  SUCCESS
 · Downloading solution project................................  SUCCESS

Setup successful. Please proceed with the exercise.


[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  source /usr/local/etc/ocp4.config
[student@workstation ~]$ 
[student@workstation ~]$  oc login -u ${RHT_OCP4_DEV_USER} \
> -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
Login successful.

You have access to the following projects and can switch between them with ' project <projectname>':

  * lizwbb-mysql-openshift
    lizwbb-s2i
    sugitatokio

Using project "lizwbb-mysql-openshift".
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  oc new-project ${RHT_OCP4_DEV_USER}-template
Now using project "lizwbb-template" on server "https://api.ap46.prod.nextcle.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app rails-postgresql-example

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname

[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ cd /home/student/DO180/labs/multicontainer-openshift
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ ls -l
total 8
-rw-rw-r--. 1 student student  300 Aug 16 11:45 db.sql
-rw-rw-r--. 1 student student 3638 Aug 16 11:45 todo-template.json
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ cat  todo-template.json
{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "todonodejs-persistent",
    "annotations": {
      "openshift.io/display-name": "TODO Application NodeJS 12.0 and MySQL 8"
    }
  },
  "message": "",
  "labels": {
    "template": "todonodejs-mysql-persistent-template",
    "app": "todonodejs"
  },
  "objects": [
    {
      "apiVersion": "v1",
      "kind": "Pod",
      "metadata": {
        "name": "mysql",
        "labels": {
          "name": "mysql"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "registry.redhat.io/rhel8/mysql-80:1",
            "name": "mysql",
            "env": [
              {
                "name": "MYSQL_ROOT_PASSWORD",
                "value": "r00tpa55"
              },
              {
                "name": "MYSQL_USER",
                "value": "user1"
              },
              {
                "name": "MYSQL_PASSWORD",
                "value": "mypa55"
              },
              {
                "name": "MYSQL_DATABASE",
                "value": "items"
              }
            ],
            "ports": [
              {
                "containerPort": 3306,
                "name": "mysql"
              }
            ],
            "volumeMounts": [
              {
                "mountPath": "/var/lib/mysql/data",
                "name": "db-volume"
              }
            ]
          }
        ],
        "volumes": [
          {
            "name": "db-volume",
            "persistentVolumeClaim": {
              "claimName": "dbclaim"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Pod",
      "metadata": {
        "name": "todoapi",
        "labels": {
          "name": "todoapi"
        }
      },
      "spec": {
        "containers": [
          {
            "resources": {
              "limits" : {
                "cpu": "0.5"
              }
            },
            "image": "quay.io/redhattraining/do180-todonodejs-12",
            "name": "todoapi",
            "ports": [
              {
                "containerPort": 30080,
                "name": "nodejs-http"
              }
            ],
            "env": [
              {
                "name": "MYSQL_ENV_MYSQL_DATABASE",
                "value": "items"
              },
              {
                "name": "MYSQL_ENV_MYSQL_USER",
                "value": "user1"
              },
              {
                "name": "MYSQL_ENV_MYSQL_PASSWORD",
                "value": "mypa55"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "name": "todoapi"
        },
        "name": "todoapi"
      },
      "spec": {
        "ports": [
          {
            "port": 30080
          }
        ],
        "selector": {
          "name": "todoapi"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "name": "mysql"
        },
        "name": "mysql"
      },
      "spec": {
        "ports": [
          {
            "port": 3306
          }
        ],
        "selector": {
          "name": "mysql"
        }
      }
    },
    {
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "name": "dbclaim"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "10Mi"
          }
        }
      }
    }
  ]
}
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ oc process \
> -f todo-template.json \
>  | oc create -f -
pod/mysql created
pod/todoapi created
service/todoapi created
service/mysql created
persistentvolumeclaim/dbclaim created
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ oc get pods -w
NAME      READY   STATUS              RESTARTS   AGE
mysql     0/1     ContainerCreating   0          14s
todoapi   1/1     Running             0          14s
mysql     1/1     Running             0          15s
^C[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$  cd /home/student/DO180/labs/multicontainer-openshift
[student@workstation multicontainer-openshift]$  mysql -uuser1 \
> -h 127.0.0.1 -pmypa55 -P3306 items < db.sql
mysql: [Warning] Using a password on the command line interface can be insecure.
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ oc expose service todoapi
route.route.openshift.io/todoapi exposed
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$  oc status | grep -o "http:.*com"
http://todoapi-lizwbb-template.apps.ap46.prod.nextcle.com
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ curl -w "\n" \
>  $(oc status | grep -o "http:.*com")/todo/api/items/1
{"id":1,"description":"Pick up newspaper","done":false}
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ 
[student@workstation multicontainer-openshift]$ cd
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$  lab multicontainer-openshift finish

Completing the Guided Exercise: Creating an Application with a Template

 · Log in on OpenShift.........................................  SUCCESS
 · Removing lizwbb-template project............................  SUCCESS
 · Removing the project directory..............................  SUCCESS
 · Removing the solution directory.............................  SUCCESS
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ cd
[student@workstation ~]$ 
[student@workstation ~]$ 
[student@workstation ~]$ ls -l
total 0
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Desktop
drwxr-xr-x. 4 root    root     35 Dec  1 01:14 DO180
drwxrwxr-x. 9 student student 143 Dec  2 21:03 DO180-apps
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Documents
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Downloads
-rw-rw-r--. 1 student student   0 Dec  1 00:23 -e
drwxrwxr-x. 3 student student  19 Dec  1 03:27 local
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Music
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Pictures
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Public
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Templates
drwxr-xr-x. 2 student student   6 Nov 30 20:11 Videos
[student@workstation ~]$ 
[student@workstation ~]$ cd DO180-apps
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls -l
total 4
drwxrwxr-x. 2 student student 23 Nov 30 22:06 example
drwxrwxr-x. 2 student student 43 Nov 30 22:06 nodejs-app
drwxrwxr-x. 2 student student 40 Nov 30 22:06 nodejs-helloworld
drwxrwxr-x. 2 student student 23 Dec  2 21:41 php-helloworld
-rw-rw-r--. 1 student student 54 Nov 30 22:06 README.md
drwxrwxr-x. 2 student student 23 Nov 30 22:06 temps
drwxrwxr-x. 5 student student 51 Nov 30 22:06 todoapp
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ touch test.txt
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ ls -l
total 4
drwxrwxr-x. 2 student student 23 Nov 30 22:06 example
drwxrwxr-x. 2 student student 43 Nov 30 22:06 nodejs-app
drwxrwxr-x. 2 student student 40 Nov 30 22:06 nodejs-helloworld
drwxrwxr-x. 2 student student 23 Dec  2 21:41 php-helloworld
-rw-rw-r--. 1 student student 54 Nov 30 22:06 README.md
drwxrwxr-x. 2 student student 23 Nov 30 22:06 temps
-rw-rw-r--. 1 student student  0 Dec  3 02:43 test.txt
drwxrwxr-x. 5 student student 51 Nov 30 22:06 todoapp
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 
[student@workstation DO180-apps]$ 

